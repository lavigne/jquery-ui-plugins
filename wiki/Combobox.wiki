#summary JQuery UI based combobox widget that combines a drop-down list with a text field to create a drop-down list that filters options based on the user's input as they type.
#labels Featured

=Summary=
A JQuery UI based combobox widget that combines a drop-down list with a text field to create a drop-down list that filters options based on the user's input as they type. This widget
was created based on the [http://jqueryui.com/autocomplete/#combobox demo] provided by the jQuery UI team in the documentation for the [http://jqueryui.com/autocomplete/ Autocomplete] widget. It adds
some functionality to make it behave a bit more like a regular HTML select list and provides some options, methods and events so it can be manipulated and customized like a regular jQuery UI widget.

=Example=
<img src="https://jquery-ui-plugins.googlecode.com/svn/trunk/demos/images/combobox.png">

{{{
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Combobox Example</title>
  <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="css/jquery-ui-combobox.css" type="text/css"/>	
  <script src="http://code.jquery.com/jquery-1.8.2.js"></script>
  <script src="http://code.jquery.com/ui/1.9.0/jquery-ui.js"></script>
  <script type="text/javascript" src="js/jquery-ui-combobox.js"></script>		
</head>
<body>		
  <select id="myCombobox">
    <option value="">Select one...</option>
    <option value="ActionScript">ActionScript</option>
    <option value="AppleScript">AppleScript</option>
    <option value="Asp">Asp</option>
    <option value="BASIC">BASIC</option>
    <option value="C">C</option>
    <option value="C++">C++</option>
    <option value="Clojure">Clojure</option>
    <option value="COBOL">COBOL</option>
    <option value="ColdFusion">ColdFusion</option>
    <option value="Erlang">Erlang</option>
    <option value="Fortran">Fortran</option>
    <option value="Groovy">Groovy</option>
    <option value="Haskell">Haskell</option>
    <option value="Java">Java</option>
    <option value="JavaScript">JavaScript</option>
    <option value="Lisp">Lisp</option>
    <option value="Perl">Perl</option>
    <option value="PHP">PHP</option>
    <option value="Python">Python</option>
    <option value="Ruby">Ruby</option>
    <option value="Scala">Scala</option>
    <option value="Scheme">Scheme</option>
  </select>
	
  <script type="text/javascript">			
    $(function() {				
      $("#myCombobox").combobox();						
    });
  </script>								
</body>
</html>
}}}

=Combobox API=

<table cellspacing="10px">
	<tr>
		<td><h3>[#Options Options]</h3></td>
		<td><h3>[#Methods Methods]</h3></td>
		<td><h3>[#Events Events]</h3></td>
	</tr>	
	
	<tr>
		<td>[#buttonClass buttonClass]</td>
		<td>[#close() close]</td>
		<td>[#change(event,_data) change]</td>
	</tr>
	<tr>
		<td>[#buttonStyle buttonStyle]</td>
		<td>[#destroy() destroy]</td>
		<td>[#close(event,_data) close]</td>
	</tr>
	<tr>
		<td>[#height height]</td>
		<td>[#disable() disable]</td>
		<td>[#create(event,_data) create]</td>		
	</tr>
	<tr>
		<td>[#ignoreCase ignoreCase]</td>
		<td>[#enable() enable]</td>
		<td>[#disable(event,_data) disable]</td>		
	</tr>
	<tr>
		<td>[#inputClass inputClass]</td>
		<td>[#open() open]</td>
		<td>[#enable(event,_data) enable]</td>		
	</tr>
	<tr>
		<td>[#inputStyle inputStyle]</td>
		<td>[#option() option]</td>
		<td>[#open(event,_data) open]</td>		
	</tr>
	<tr>
		<td>[#maxHeight maxHeight]</td>
		<td></td>
		<td>[#select(event,_data) select]</td>
	</tr>
	<tr>
		<td>[#searchType searchType]</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>[#width width]</td>
		<td></td>
		<td></td>
	</tr>
</table>
==Options==
====buttonClass====
CSS class to apply to the drop-down button.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ""

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'buttonClass': 'redButton'
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'buttonClass', 'redButton');
}}}
---------------------------------------
====buttonStyle====
CSS style to apply to the drop-down button.

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* {}

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'buttonStyle': {"border": "1px solid black"}
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'buttonStyle', {"border": "1px solid black"});
}}}
---------------------------------------
====height====
Height of the combobox.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 20

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'height': 30
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'height', 30);
}}}
---------------------------------------
====ignoreCase====
Boolean value indicating whether case should be ignored while searching the list for values matching the user's input.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'ignoreCase': false
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'ignoreCase', false);
}}}
---------------------------------------
====inputClass====
CSS class to apply to the input box.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ""

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'inputClass': 'bigInput'
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'inputClass', 'bigInput');
}}}
---------------------------------------
====inputStyle====
CSS style to apply to the input box.

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* {}

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'inputStyle': {"padding": "20px"}
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'inputStyle', {"padding": "20px"});
}}}
---------------------------------------
====maxHeight====
Maximum height of the drop-down list of values. If the list of values exceeds this height the list becomes scrollable.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 200

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'maxHeight': 100
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'maxHeight', 100);
}}}
---------------------------------------
====searchType====
The type of search performed when attempting to find values that match the user's input. Valid values are "startsWith" and "contains".

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* "startsWith"

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'searchType': 'contains'
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'searchType', 'contains');
}}}
---------------------------------------
====width====
The width of the combobox.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 200

*Example:*

Set during initialization:
{{{
$('#myCombobox').combobox({
  'width': 100
});
}}}

OR via option method after initialization:
{{{
$('#myCombobox').combobox('option', 'width', 100);
}}}
---------------------------------------
	
==Methods==
====close()====
Close the drop-down list if it's displayed.

*Example:*
{{{
$('#myCombobox').combobox('close');
}}}
---------------------------------------
====destroy()====
Destroy the combobox, removing all functionality added by the plugin and returning the element to it's original state.

*Example:*
{{{
$('#myCombobox').combobox('destroy');
}}}
---------------------------------------
====disable()====
Disable the combobox.

*Example:*
{{{
$('#myCombobox').combobox('disable');
}}}
---------------------------------------
====enable()====
Enable the combobox.

*Example:*
{{{
$('#myCombobox').combobox('enable');
}}}
---------------------------------------
====open()====
Open the drop-down list.

*Example:*
{{{
$('#myCombobox').combobox('open');
}}}
---------------------------------------
====option()====
Gets an object containing key/value pairs representing the combobox's current options hash.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*
{{{
var options = $('#myCombobox').combobox('option');
}}}
---------------------------------------
====option(optionName)====
Gets the value currently associated with the option specified by optionName.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*
{{{
var comboHeight = $('#myCombobox').combobox('option', 'height');
}}}
---------------------------------------
====option(optionName, value)====
Sets the value of the option specified by optionName.

*Example:*
{{{
$('#myCombobox').combobox('option', 'height', 30);
}}}
---------------------------------------
==Events==
====change(event, data)====
Triggered when the input field is blurred after the user has typed a value that matches one of the items in the list, thereby changing the selected value. This event is NOT fired when user selects a value from the list using the mouse or arrows keys, in that case the [select() select] event is fired.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]

  
<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]
<ul>

<li>*item*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The option item that is now selected.

</ul> 
</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'change': function(event, data) {
    // code to execute when the selection is changed by the user typing a valid value
  }
});
}}}   
---------------------------------------
====close(event, data)====
Triggered when the drop-down list is closed.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]
  

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'close': function(event, data) {
    // code to execute when the select list is closed
  }
});
}}}   
---------------------------------------
====create(event, data)====
Triggered when the combobox is created.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]
  

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'create': function(event, data) {
    // code to execute when the combobox is created
  }
});
}}}   
---------------------------------------
====disable(event, data)====
Triggered when the combobox is disabled.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]
  

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'disable': function(event, data) {
    // code to execute when the combobox is disabled
  }
});
}}}   
---------------------------------------
====enable(event, data)====
Triggered when the combobox is enabled.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]
  

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'enable': function(event, data) {
    // code to execute when the combobox is enabled
  }
});
}}}   
---------------------------------------
====open(event, data)====
Triggered when the drop-down list is opened.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]
  

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'open': function(event, data) {
    // code to execute when the drop-down list is opened
  }
});
}}}   
---------------------------------------
====select(event, data)====
Triggered when a value is selected from the list using the arrow keys or the mouse.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]

  
<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]
<ul>

<li>*item*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The option item that is now selected.

</ul> 
</ul>

*Example:*
{{{
$('#myCombobox').combobox({    
  'select': function(event, data) {
    // code to execute when a value is selected from the drop-down list
  }
});
}}}   
---------------------------------------