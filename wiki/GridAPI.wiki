=Grid API=
`*` Denotes options, methods & events that are specific to the jQuery UI Plugin Grid (i.e. not part of Slick Grid). Some simply delegate to underlying Slick Grid functionality but are exposed via the jQuery plugin so they can initialized/called like any other jQuery UI plugin option/method/event.

<table cellspacing="10px" style="text-align:left;">
<tr>
  <td><h3>[#Options Options]</h3></td>
  <td><h3>[#Methods Methods]</h3></td>
  <td><h3>[#Events Events]</h3></td>
</tr>
<tr>
  <td>[#asyncEditorLoadDelay asyncEditorLoadDelay]</td>
  <td>[#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass *]</td>
  <td>[#disable() disable *]</td>
</tr>
<tr>
  <td>[#asyncEditorLoading asyncEditorLoading]</td>
  <td>[#addCellCssStyles(key,_hash) addCellCssStyles]</td>
  <td>[#enable() enable *]</td>
</tr>
<tr>
  <td>[#asyncPostRenderDelay asyncPostRenderDelay]</td>
  <td>[#autosizeColumns() autosizeColumns]</td>
  <td>[#onActiveCellChanged() onActiveCellChanged]</td>
</tr>
<tr>
  <td>[#autoEdit autoEdit]</td>
  <td>[#cancelCurrentEdit() cancelCurrentEdit *]</td>
  <td>[#onActiveCellPositionChanged() onActiveCellPositionChanged]</td>
</tr>
<tr>
  <td>[#autoHeight autoHeight]</td>
  <td>[#canCellBeActive(rowIndex,_columnIndex) canCellBeActive]</td>
  <td>[#onAddNewRow() onAddNewRow]</td>
</tr>
<tr>
  <td>[#calendarImage calendarImage *]</td>
  <td>[#canCellBeSelected(rowIndex,_columnIndex) canCellBeSelected]</td>
  <td>[#onBeforeCellEditorDestroy() onBeforeCellEditorDestroy]</td>
</tr>
<tr>
  <td>[#cellFlashingCssClass cellFlashingCssClass]</td>
  <td>[#clearCellCssClass(rowKey,_columnName) clearCellCssClass *]</td>
  <td>[#onBeforeDestroy() onBeforeDestroy]</td>
</tr>
<tr>
  <td>[#columns columns]</td>
  <td>[#clearChangedItems() clearChangedItems *]</td>
  <td>[#onBeforeEditCell(event,_data) onBeforeEditCell]</td>
</tr>
<tr>
  <td>[#data data]</td>
  <td>[#destroy() destroy]</td>
  <td>[#onBeforeHeaderCellDestroy() onBeforeHeaderCellDestroy]</td>
</tr>
<tr>
  <td>[#dataItemColumnValueExtractor dataItemColumnValueExtractor]</td>
  <td>[#disable() disable *]</td>
  <td>[#onBeforeHeaderRowCellDestroy() onBeforeHeaderRowCellDestroy]</td>
</tr>
<tr>
  <td>[#defaultColumnWidth defaultColumnWidth]</td>
  <td>[#editActiveCell() editActiveCell]</td>
  <td>[#onCellChange() onCellChange]</td>
</tr>
<tr>
  <td>[#defaultFormatter defaultFormatter]</td>
  <td>[#enable() enable *]</td>
  <td>[#onCellCssStylesChanged() onCellCssStylesChanged]</td>
</tr>
<tr>
  <td>[#editable editable]</td>
  <td>[#flashCell(rowIndex,_columnIndex,_speed) flashCell]</td>
  <td>[#onClick() onClick]</td>
</tr>
<tr>
  <td>[#editorFactory editorFactory]</td>
  <td>[#focus() focus]</td>
  <td>[#onColumnsReordered() onColumnsReordered]</td>
</tr>
<tr>
  <td>[#editorLock editorLock]</td>
  <td>[#getActiveCell() getActiveCell]</td>
  <td>[#onColumnsResized() onColumnsResized]</td>
</tr>
<tr>
  <td>[#enableAddRow enableAddRow]</td>
  <td>[#getActiveCellNode() getActiveCellNode]</td>
  <td>[#onContextMenu() onContextMenu]</td>
</tr>
<tr>
  <td>[#enableAsyncPostRender enableAsyncPostRender]</td>
  <td>[#getActiveCellPosition() getActiveCellPosition]</td>
  <td>[#onDblClick() onDblClick]</td>
</tr>
<tr>
  <td>[#enableCellNavigation enableCellNavigation]</td>
  <td>[#getCanvasNode() getCanvasNode]</td>
  <td>[#onDrag() onDrag]</td>
</tr>
<tr>
  <td>[#enableColumnReorder enableColumnReorder]</td>
  <td>[#getCellCssClass(rowKey,_columnName) getCellCssClass *]</td>
  <td>[#onDragEnd() onDragEnd]</td>
</tr>
<tr>
  <td>[#enableTextSelectionOnCells enableTextSelectionOnCells]</td>
  <td>[#getCellCssStyles(key) getCellCssStyles]</td>
  <td>[#onDragInit() onDragInit]</td>
</tr>
<tr>
  <td>[#explicitInitialization explicitInitialization]</td>
  <td>[#getCellEditor() getCellEditor]</td>
  <td>[#onDragStart() onDragStart]</td>
</tr>
<tr>
  <td>[#forceFitColumns forceFitColumns]</td>
  <td>[#getCellFromEvent(event) getCellFromEvent]</td>
  <td>[#onHeaderCellRendered() onHeaderCellRendered]</td>
</tr>
<tr>
  <td>[#forceSyncScrolling forceSyncScrolling]</td>
  <td>[#getCellFromPoint(x,_y) getCellFromPoint]</td>
  <td>[#onHeaderClick() onHeaderClick]</td>
</tr>
<tr>
  <td>[#formatterFactory formatterFactory]</td>
  <td>[#getCellNode(rowIndex,_columnIndex) getCellNode]</td>
  <td>[#onHeaderContextMenu() onHeaderContextMenu]</td>
</tr>
<tr>
  <td>[#fullWidthRows fullWidthRows]</td>
  <td>[#getCellNodeBox() getCellNodeBox]</td>
  <td>[#onHeaderMouseEnter() onHeaderMouseEnter]</td>
</tr>
<tr>
  <td>[#headerRowHeight headerRowHeight]</td>
  <td>[#getChangedItems() getChangedItems *]</td>
  <td>[#onHeaderMouseLeave() onHeaderMouseLeave]</td>
</tr>
<tr>
  <td>[#leaveSpaceForNewRows leaveSpaceForNewRows]</td>
  <td>[#getChanges() getChanges *]</td>
  <td>[#onHeaderRowCellRendered() onHeaderRowCellRendered]</td>
</tr>
<tr>
  <td>[#multiColumnSort multiColumnSort]</td>
  <td>[#getColumnIndex(columnName) getColumnIndex]</td>
  <td>[#onKeyDown() onKeyDown]</td>
</tr>
<tr>
  <td>[#multiSelect multiSelect]</td>
  <td>[#getColumns() getColumns]</td>
  <td>[#onMouseEnter() onMouseEnter]</td>
</tr>
<tr>
  <td>[#rowHeight rowHeight]</td>
  <td>[#getData() getData *]</td>
  <td>[#onMouseLeave() onMouseLeave]</td>
</tr>
<tr>
  <td>[#rowKey rowKey]</td>
  <td>[#getDataItem(rowIndex) getDataItem]</td>
  <td>[#onScroll() onScroll]</td>
</tr>
<tr>
  <td>[#selectActiveCell selectActiveCell *]</td>
  <td>[#getDataLength() getDataLength]</td>
  <td>[#onSelectedRowsChanged() onSelectedRowsChanged]</td>
</tr>
<tr>
  <td>[#selectActiveRow selectActiveRow *]</td>
  <td>[#getDataView() getDataView *]</td>
  <td>[#onSort() onSort]</td>
</tr>
<tr>
  <td>[#selectedCellCssClass selectedCellCssClass]</td>
  <td>[#getEditController() getEditController]</td>
  <td>[#onValidationError() onValidationError]</td>
</tr>
<tr>
  <td>[#selectionModel selectionModel *]</td>
  <td>[#getEditorLock() getEditorLock]</td>
  <td>[#onViewportChanged() onViewportChanged]</td>
</tr>
<tr>
  <td>[#showHeaderRow showHeaderRow]</td>
  <td>[#getGridPosition() getGridPosition]</td>
  <td></td>
</tr>
<tr>
  <td>[#showTopPanel showTopPanel]</td>
  <td>[#getHeaderRow() getHeaderRow]</td>
  <td></td>
</tr>
<tr>
  <td>[#topPanelHeight topPanelHeight]</td>
  <td>[#getHeaderRowColumn(columnName) getHeaderRowColumn]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getItem(rowKey) getItem *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getItems(rowKeys) getItems *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getOptions() getOptions]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getRenderedRange() getRenderedRange]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSelectedRows() getSelectedRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSelectionModel() getSelectionModel]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSlickGrid() getSlickGrid *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSortColumns() getSortColumns]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getTopPanel() getTopPanel]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getViewport() getViewport]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#gotoCell() gotoCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#init() init]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidate() invalidate]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidateAllRows() invalidateAllRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidateRow() invalidateRow]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidateRows() invalidateRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateDown() navigateDown]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateLeft() navigateLeft]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateNext() navigateNext]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigatePrev() navigatePrev]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateRight() navigateRight]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateUp() navigateUp]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#registerPlugin() registerPlugin]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#removeCellCssClass() removeCellCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#removeCellCssStyles() removeCellCssStyles]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#removeRowCssClass() removeRowCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#render() render]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#resetActiveCell() resetActiveCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#resizeCanvas() resizeCanvas]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#saveCurrentEdit() saveCurrentEdit *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#scrollCellIntoView() scrollCellIntoView]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#scrollRowIntoView() scrollRowIntoView]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#scrollRowToTop() scrollRowToTop]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setActiveCell() setActiveCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setCellCssClass(rowKey,_columnName,_cssClass) setCellCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setCellCssClasses(cssData) setCellCssClasses *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setCellCssStyles() setCellCssStyles]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setColumns() setColumns]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setData() setData]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setHeaderRowVisibility() setHeaderRowVisibility]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setOptions() setOptions]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setRowCssClass() setRowCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSelectedRows() setSelectedRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSelectionModel() setSelectionModel]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSortColumn() setSortColumn]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSortColumns() setSortColumns]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setTopPanelVisibility() setTopPanelVisibility]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#unregisterPlugin() unregisterPlugin]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateCell() updateCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateColumnHeader() updateColumnHeader]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateRow() updateRow]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateRowCount() updateRowCount]</td>
  <td></td>
</tr>
</table>
==Options==
====asyncEditorLoadDelay====
Delay after which cell editor is loaded. Ignored unless asyncEditorLoading is true.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 100

---------------------------------------

====asyncEditorLoading====
Makes cell editors load asynchronously after a small delay. This greatly increases keyboard navigation speed.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====asyncPostRenderDelay====
*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 50

---------------------------------------

====autoEdit====
Cell will not automatically go into edit mode when it receives focus.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====autoHeight====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====calendarImage====
The location of the calendar icon to be used for editable date fields and date filters.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* http://jquery-ui-plugins.googlecode.com/svn/trunk/examples/images/calendar.png

---------------------------------------

====cellFlashingCssClass====
A CSS class to apply to flashing cells via flashCell().

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* flashing

---------------------------------------

====columns====
*Type:* [http://api.jquery.com/Types/#Array Array]

*Default:* 

---------------------------------------

====data====
*Type:* [http://api.jquery.com/Types/#Array Array]

*Default:* 

---------------------------------------

====dataItemColumnValueExtractor====
A custom function that can be used to modify the cell value before it's passed to the formatter. In the example below the {{{values}}} field on the row object contains an array and the custom {{{dataItemColumnValueExtractor}}} returns one of the values in the array based on an index field on the column so each value in the {{{values}}} array is displayed in a different column.

*Type:* [http://api.jquery.com/Types/#Function Function]

*Default:* null

*Example:*

Set during initialization:
{{{
var columns = [
  {id: 'name', name: 'Name', field: 'name'},
  {id: 'field1', name: 'Field1', field: 'values', fieldIdx: 0},
  {id: 'field2', name: 'Field2', field: 'values', fieldIdx: 1},
  {id: 'field3', name: 'Field3', field: 'values', fieldIdx: 2}
];

// Get the item column value using a custom 'fieldIdx' column param
function getItemColumnValue(item, column) {
  var values = item[column.field];
  if (column.fieldIdx !== undefined) {
	return values && values[column.fieldIdx];
  } else {
	return values;
  }
}

$('#myGrid').grid({
  data: myData,
  columns: columns,
  rowKey: 'name',
  dataItemColumnValueExtractor: getItemColumnValue
});
}}}

---------------------------------------

====defaultColumnWidth====
*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 80

---------------------------------------

====defaultFormatter====
*Type:* [http://api.jquery.com/Types/#Function Function]

*Default:* A function that displays the field's value as text.

---------------------------------------

====editable====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====editorFactory====
An object that implements a getEditor(columnDefinition) function that returns the editor for a given column. See [https://github.com/mleibman/SlickGrid/wiki/Writing-custom-cell-editors Custom_Editors].

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* null

---------------------------------------

====editorLock====
A Slick.!EditorLock instance to use for controlling concurrent data edits.

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* Slick.!GlobalEditorLock

---------------------------------------

====enableAddRow====
If true, a blank row will be displayed at the bottom - typing values in that row will add a new one. Must subscribe to onAddNewRow to save values.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====enableAsyncPostRender====
If true, async post rendering will occur and asyncPostRender delegates on columns will be called.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====enableCellNavigation====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====enableColumnReorder====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====enableTextSelectionOnCells====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====explicitInitialization====
Normally SlickGrid is initialized when it's created. Use this option to defer initialization and call the init() method manually. This is useful in cases where the grid is created before the DOM element it's attached is inserted into the DOM. See [http://mleibman.github.com/SlickGrid/examples/example-explicit-initialization.html Explicit Initialization Example] for more details.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====forceFitColumns====
Force column sizes to fit into the container (preventing horizontal scrolling). Effectively sets column width to be 1/Number of Columns which on small containers may not be desirable.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====forceSyncScrolling====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====formatterFactory====
An object that implements a {{{getFormatter(columnDefinition)}}} function that returns the formatter for a given column.  

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* null

*Example:*

Set during initialization:
{{{
var myFormatterFactory = {
  getFormatter: function(column) {
    switch(column.field) {
      case 'onSchedule':
        // custom formatter shows a check mark image when onSchedule is truthy
        return function (rowNum, cellNum, value, columnDef, row) {
          return value ? '<img src="images/tick.png"/>' : '';
        };
        break;
      case 'cost':
        // custom formatter that puts an asertisk on values > 5000
        return function (rowNum, cellNum, value, columnDef, row) {
          return Number(value) > 5000 ? '*' + value : value;
        }
    }
  }
};

$('#myGrid').grid({
  data: myData,
  columns: columns,
  rowKey: 'name'
  formatterFactory: myFormatterFactory
});
}}}

---------------------------------------

====fullWidthRows====
Will expand the table row divs to the full width of the container, table cell divs will remain aligned to the left.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====headerRowHeight====
*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 25

---------------------------------------

====leaveSpaceForNewRows====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====multiColumnSort====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====multiSelect====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====rowHeight====
*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 25

---------------------------------------

====rowKey====
The property on each row object that can be used to uniquely identify the row.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* id

---------------------------------------

====selectActiveCell====
When using "cell" [#selectionModel selectionModel], this is a boolean value indicating whether the active cell should be selected, i.e. have [#selectedCellCssClass selectedCellCssClass] applied to it.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====selectActiveRow====
When using "row" [#selectionModel selectionModel], this is a boolean value indicating whether the active row should be selected, i.e. have [#selectedCellCssClass selectedCellCssClass] applied to it.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====selectedCellCssClass====
A CSS class to apply to cells highlighted via [#setHighlightedCells() setHighlightedCells].

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* selected

---------------------------------------

====selectionModel====
A string or object identifying the type of selection used by the grid. To use the built-in !RowSelectionModel or !CellSelectionModel implementation, enter a string value of "row" or "cell". To use a customselection model pass an object that implements the !Slick.SelectionModel interface as defined [https://github.com/mleibman/SlickGrid/wiki/Handling-selection here].

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* null

---------------------------------------

====showHeaderRow====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====showTopPanel====
*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====topPanelHeight====
*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 25

---------------------------------------

==Methods==
====addCellCssClass(rowKey, columnName, cssClass)====
Add the specified cssClass to the cell at rowKey and columnName. Note that this method only adds the specified class to the list of classes applied to the cell. To set the cell's class attribute to a new value (thus removing any classes previously set on the cell) use [#setCellCssClasses(cssData) setCellCssClasses].

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]

 * *cssClass*
 Type: [http://api.jquery.com/Types/#String String]

 The list of CSS classes to apply to the specified cell.

---------------------------------------

====addCellCssStyles(key, hash)====
A Slick grid method that adds css style to cells by row index and column name. To add CSS style by row key and column use [#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass]. This is the add-only sibling to {{{setCellCssStyles(key, hash)}}}. It will throw an exception if you try to set the same {{{key}}} twice without calling {{{removeCellCssStyles()}}}. Use {{{setColumnCssStyles()}}} instead if you don't want that.

 * *key*
 Type: [http://api.jquery.com/Types/#String String]

 A key that can be used to access the hash of styles later, to modify or remove it, for example.

 * *hash*
 Type: [http://api.jquery.com/Types/#Object Object]

 An object that identifies by row index and column name, what styles to apply.

*Example:*

{{{
$('#myGrid').grid('addCellCssStyles', 'myKey',
  {
    2: {
      title: 'error',
      percentComplete: 'warn'
    },
    9: {
      title: 'blue warn',
      start: 'error'
    }
  }
);

}}}

---------------------------------------

====autosizeColumns()====
---------------------------------------

====cancelCurrentEdit()====
If there is a cell in edit mode, revert the cell's value and take it out of edit mode.

*Example:*

{{{
$('myGrid').grid('cancelCurrentEdit');
}}}

---------------------------------------

====canCellBeActive(rowIndex, columnIndex)====
Returns a boolean indicating if the cell at {{{row}}} and {{{column}}} can be active.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

*Returns:* [http://api.jquery.com/Types/#Boolean Boolean]

*Example:*

{{{
$('#myGrid').grid('canCellBeSelected', 5, 3);
}}}

---------------------------------------

====canCellBeSelected(rowIndex, columnIndex)====
Returns a boolean indicating if the cell at {{{row}}} and {{{column}}} can be selected.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

*Returns:* [http://api.jquery.com/Types/#Boolean Boolean]

*Example:*

{{{
$('#myGrid').grid('canCellBeSelected', 5, 3);
}}}

---------------------------------------

====clearCellCssClass(rowKey, columnName)====
Remove all CSS classes from the cell at {{{rowKey}}} and {{{columnName}}}.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]

*Example:*

{{{
$('#myGrid').grid('clearCellCssClass', '1234', 'price');
}}}

---------------------------------------

====clearChangedItems()====
When the grid is editable, changes made to the data are tracked and can be retrieved using the [#getChangedItems getChangedItems] and [#getChanges getChanges] methods. Changed cells also have the ui-changed-cell class added to them so CSS style can be applied to changed cells. This method removes the ui-changed-cell class from changed cells and clears all change tracking data, making the visible data the new "original" state. 

*Example:*

{{{
$('#myGrid').grid('clearChangedItems');
}}}

---------------------------------------

====destroy()====
Destroy the grid, removing all functionality added by the grid plug in.

*Example:*

{{{
$('#myGrid').grid('destroy');
}}}

---------------------------------------

====disable()====
Disables the grid

*Example:*

{{{
$('#myGrid').grid('disable');
}}}

---------------------------------------

====editActiveCell()====
Put the currently active cell (the one that has focus) into edit mode. This method is really only useful when the [#autoEdit autoEdit] property is set to false, when [#autoEdit autoEdit] is true, cells automatically go into edit mode when they are receive focus on.

*Example:*

{{{
$('#myGrid').grid('editActiveCell');
}}}

---------------------------------------

====enable()====
Enables the grid

*Example:*

{{{
$('#myGrid').grid('enable');
}}}

---------------------------------------

====flashCell(rowIndex, columnIndex, speed)====
Apply and remove [#cellFlashingCssClass cellFlashingCssClass] on the cell at {{{rowIndex}}} and {{{columnIndex}}} at a rate of once every {{{speed}}} milliseconds. The [#cellFlashingCssClass cellFlashingCssClass] is applied and removed twice, creating a flashing effect. Currently the number of times to flash the cell is not configurable.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 * *speed*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 The speed at which to toggle [#cellFlashingCssClass cellFlashingCssClass] in milliseconds

*Example:*

{{{
$('#myGrid').grid('flashCell', 3, 2);
}}}

---------------------------------------

====focus()====
Set focus on the grid.

*Example:*

{{{
$('#myGrid').grid('focus');
}}}

---------------------------------------

====getActiveCell()====
Get the active cell, i.e. the one that currently has focus. This method returns an object containing {{{row}}} and {{{cell}}} properties identifying the row and column indices of the currently active cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getActiveCell');
}}}

---------------------------------------

====getActiveCellNode()====
Get the DOM element of the active cell, i.e. the one that currently has focus.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
$('#myGrid').grid('getActiveCellNode');
}}}

---------------------------------------

====getActiveCellPosition()====
Get the position coordinates of the active cell, i.e. the one that currently has focus. This method returns an object with the bottom, height, left, right, top, visible and width properties of the active cell's DOM element. Please note that in the version of !SlickGrid currently used by this plug in, this method will throw an exception if it is called when there is no active cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getActiveCellPosition');
}}}

---------------------------------------

====getCanvasNode()====
Get the DOM element of the grid canvas.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
$('#myGrid').grid('getCanvasNode');
}}}

---------------------------------------

====getCellCssClass(rowKey, columnName)====
Get the list of css classes that have been applied to the cell at {{{rowKey}}} and {{{columnName}}} via [#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass], [#setCellCssClass(rowKey,_columnName,_cssClass) setCellCssClass] or [#setCellCssClasses(cssData) setCellCssClasses].

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]

*Returns:* [http://api.jquery.com/Types/#String String]

*Example:*

{{{
var classList = $('#myGrid').grid('getCellCssClass', 'item1234', 'cost');
}}}

---------------------------------------

====getCellCssStyles(key)====
Get the CSS style hash represented by {{{key}}}. The object returned is a list of styles applied to cells by row index and column name. See [#addCellCssStyles(key,_hash) addCellCssStyles] and [#setCellCssStyles(key,_hash) setCellCssStyles] for details.

 * *key*
 Type: [http://api.jquery.com/Types/#String String]

 The key identifying a set of CSS styles applied using [#addCellCssStyles(key,_hash) addCellCssStyles] or [#setCellCssStyles(key,_hash) setCellCssStyles].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var styleHash = $('#myGrid').grid('getCellCssStyles', 'styleHashKey');
}}}

---------------------------------------

====getCellEditor()====
Get the cell editor of the cell currently being edited, if any. The returned object is an editor that follows the !SlickGrid editor interface outlined [https://github.com/mleibman/SlickGrid/wiki/Writing-custom-cell-editors here].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var cellEditor = $('#myGrid').grid('getCellEditor');
}}}

---------------------------------------

====getCellFromEvent(event)====
 * *event*
 Type: [http://api.jquery.com/Types/#Event Event]

 Get the cell closest to the target of the given {{{event}}}.

---------------------------------------

====getCellFromPoint(x, y)====
Get the cell closest to the given {{{x}}}, {{{y}}} coordinate. This method returns an object with {{{row}}} and {{{cell}}} properties identifying the row and column index of the cell closest to {{{x}}}, {{{y}}}. This method always retuns an object and appears to have some issues, especially if the point provided is outside the grid coordinates. For example, passing in 0, 0 returns {row: 0, cell: -1}. If the x coordinate is beyond the edge of the grid, the cell index predictably returns the index of the last column, however if the y coordinate is beyond the bottom edge of the grid the row index returned will be a number that is higher than the row count.

 * *x*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 * *y*
 Type: [http://api.jquery.com/Types/#Integer Integer]

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getCellFromPoint', 100, 150);
}}}

---------------------------------------

====getCellNode(rowIndex, columnIndex)====
Get the DOM element of the cell at {{{rowIndex}}} and {{{columnIndex}}}.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
$('#myGrid').grid('getCellNode', 20, 5);
}}}

---------------------------------------

====getCellNodeBox()====
Get the box coordinates of the cell at {{{rowIndex}}} and {{{columnIndex}}}. This method returns an object with the {{{top}}}, {{{left}}}, {{{bottom}}} and {{{right}}} properties of the cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getCellNodeBox', 20, 5);
}}}

---------------------------------------

====getChangedItems()====
Get row objects with cells that have been edited and changed. This method only returns rows that have cells with a value that is different than their original value, that is, if a cell value has been changed and then reverted back to it's original value, the cell is not considered "changed". To clear all tracked changes and make the current state of the grid the "original" state, use [#clearChangedItems() clearChangedItems].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var changedItems = $('#myGrid').grid('getChangedItems');
}}}

---------------------------------------

====getChanges()====
Get a list of changed cell values. This method returns an Array of objects with two properties, the first property is named whatever was specified as the [#rowKey rowKey] for the grid and the second property is an Array of change objects named "changes". the change objects have {{{field}}}, {{{newValue}}} and {{{oldValue}}} properties identifying what changed on each field for the row.

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var changes = $('#myGrid').grid('getChanges');
// below is an example of what the returned changes array might look like
[
  {
    employeeNumber: '1234',
    changes: [
      {field: 'name', newValue: 'Tom', oldValue: 'Thomas'},
      {field: 'title', newValue: 'Sr. Developer', oldValue: 'Jr. Developer'}
    ]
  },
  {
    employeeNumber: '5678',
    changes: [
      {field: 'name', newValue: 'Dave', oldValue: 'David'}
    ]
  }
]

}}}

---------------------------------------

====getColumnIndex(columnName)====
Get the column index of {{{columnName}}}.

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]

*Returns:* [http://api.jquery.com/Types/#Integer Integer]

*Example:*

{{{
var firstNameIndex = $('#myGrid').grid('getColumnIndex', 'firstName');
}}}

---------------------------------------

====getColumns()====
Get the columns Array

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var columns = $('#myGrid').grid('getColumns');
}}}

---------------------------------------

====getData()====
Get the array of data displayed in the grid in it's current state.

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var data = $('#myGrid').grid('getData');
}}}

---------------------------------------

====getDataItem(rowIndex)====
Get the row item at {{{rowIndex}}}.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var fifthRow = $('#myGrid').grid('getDataItem', 5);
}}}

---------------------------------------

====getDataLength()====
Get the number of rows in the grid.

*Returns:* [http://api.jquery.com/Types/#Integer Integer]

*Example:*

{{{
var rowCount = $('#myGrid').grid('getDataLength');
}}}

---------------------------------------

====getDataView()====
Get the !DataView object used by !SlickGrid to render the grid.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var dataView = $('#myGrid').grid('getDataView');
}}}

---------------------------------------

====getEditController()====
Get the underlying !SlickGrid's edit controller, which is an object that implements {{{cancelCurrentEdit}}} and {{{commitCurrentEdit}}} methods that are used to manage cell editing state. Interactions with the edit controller should not be done directly, they should go through an {{{EditorLock}}} which ensures there can only be one active edit controller at a time. For cancelling and saving edits, use [#cancelCurrentEdit() cancelCurrentEdit] and [#saveCurrentEdit() saveCurrentEdit].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var editController = $('#myGrid').grid('getEditController');
}}}

---------------------------------------

====getEditorLock()====
Get the underlying !SlickGrid's EditorLock, which is a locking helper to track the active edit controller and ensure that only a single controller can be active at a time.

*Returns:* [http://api.jquery.com/Types/#EditorLock EditorLock]

*Example:*

{{{
var editorLock = $('#myGrid').grid('getEditorLock');
}}}

---------------------------------------

====getGridPosition()====
Get the grid's position information. This method returns and object containing the grid's {{{bottom}}}, {{{height}}}, {{{left}}}, {{{right}}}, {{{top}}}, {{{visible}}} and {{{width}}} properties.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var positionInfo = $('#myGrid').grid('getGridPosition');
}}}

---------------------------------------

====getHeaderRow()====
Get the header row DOM element.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
var headerRow = $('#myGrid').grid('getHeaderRow');
}}}

---------------------------------------

====getHeaderRowColumn(columnName)====
Get the column header DOM element for the column identified by {{{columnName}}}.

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
var columnHeader = $('#myGrid').grid('getHeaderRowColumn');
}}}

---------------------------------------

====getItem(rowKey)====
Get the item, i.e. row object, identified by {{{rowKey}}}.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var item = $('#myGrid').grid('getItem', '1234');
}}}

---------------------------------------

====getItems(rowKeys)====
Get the items, i.e. row objects, identified by {{{rowKeys}}}.

 * *rowKeys*
 Type: [http://api.jquery.com/Types/#Array Array]

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var items = $('#myGrid').grid('getItems', ['1234', '5678']);
}}}

---------------------------------------

====getOptions()====
Get the grid options object passed in at initialization.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var options = $('#myGrid').grid('getOptions');
}}}

---------------------------------------

====getRenderedRange()====
This method is used internally by !SlickGrid during rendering to get the portion of the grid that should be visible in the viewport. It returns a range object with {{{top}}}, {{{bottom}}}, {{{leftPx}}} and {{{rightPx}}} properties defining the range that needs to be visible so the grid can determine what rows and cells need to be rendered and what ones can be removed.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var renderedRange = $('#myGrid').grid('getRenderedRange');
}}}

---------------------------------------

====getSelectedRows()====
Get the list of currently selected rows. This method returns an Array containing the row indices of the currently selected rows. For more information on row selection see the [#selectionModel selectionModel] attribute and the [https://github.com/mleibman/SlickGrid/wiki/Handling-selection SlickGrid documentation on selection].

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var selectedRows = $('#myGrid').grid('getSelectedRows');
}}}

---------------------------------------

====getSelectionModel()====
Get the selection model object used by the grid to manage row/cell selection. The return value is a selection model object following the interface defined [https://github.com/mleibman/SlickGrid/wiki/Handling-selection here].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var selectionModel = $('#myGrid').grid('getSelectionModel');
}}}

---------------------------------------

====getSlickGrid()====
Get the underlying !SlickGrid object backing the grid.

*Returns:* [http://api.jquery.com/Types/#Slick.Grid Slick.Grid]

*Example:*

{{{
var slickGrid = $('#myGrid').grid('getSlickGrid');
}}}

---------------------------------------

====getSortColumns()====
Get the list of columns that the grid is currently sorted by. This method returns an array of objects containing {{{columnId}}} and {{{sortAsc}}} properties.

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var sortColumns = $('#myGrid').grid('getSortColumns');
}}}

---------------------------------------

====getTopPanel()====
Get the top panel DOM element created by !SlickGrid. This is a large div that is below the grid (in terms of z-index) and is used to apply jQuery UI styles to the grid.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
var topPanelElement = $('#myGrid').grid('getTopPanel');
}}}

---------------------------------------

====getViewport()====
Get the current dimensions of the viewport. This method returns an object with {{{top}}}, {{{bottom}}}, {{{leftPx}}} and {{{rightPx}}} properties.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var viewport = $('#myGrid').grid('getViewport');
}}}

---------------------------------------

====gotoCell()====
---------------------------------------

====init()====
---------------------------------------

====invalidate()====
---------------------------------------

====invalidateAllRows()====
---------------------------------------

====invalidateRow()====
---------------------------------------

====invalidateRows()====
---------------------------------------

====navigateDown()====
---------------------------------------

====navigateLeft()====
---------------------------------------

====navigateNext()====
---------------------------------------

====navigatePrev()====
---------------------------------------

====navigateRight()====
---------------------------------------

====navigateUp()====
---------------------------------------

====registerPlugin()====
---------------------------------------

====removeCellCssClass()====
---------------------------------------

====removeCellCssStyles()====
---------------------------------------

====removeRowCssClass()====
---------------------------------------

====render()====
---------------------------------------

====resetActiveCell()====
---------------------------------------

====resizeCanvas()====
---------------------------------------

====saveCurrentEdit()====
---------------------------------------

====scrollCellIntoView()====
---------------------------------------

====scrollRowIntoView()====
---------------------------------------

====scrollRowToTop()====
---------------------------------------

====setActiveCell()====
---------------------------------------

====setCellCssClass(rowKey, columnName, cssClass)====
Set the css class of the cell at rowKey and columnName to cssClass, thus removing any class set on the cell previously by setCellCssClass, addCellCssClass or setCellCssClasses.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]

 * *cssClass*
 Type: [http://api.jquery.com/Types/#String String]

 The list of CSS classes to apply to the specified cell.

---------------------------------------

====setCellCssClasses(cssData)====
Method to set CSS classes on several cells in one call. The cssData parameter is an array of objects containing, by row, a list of CSS classes to apply to columns.

 * *cssData*
 Type: [http://api.jquery.com/Types/#Array Array]

 An array of objects identifying, by row and column, a list of classes to apply to specific cells.

*Example:*

{{{
var cssClasses = [
  {
    rowKey: 'row1234',
    cellClasses: {'column1': 'error', 'column3': 'warning anotherClass'}
  },
  {
    rowKey: 'row4567',
    cellClasses: {'column1': 'warning'}
  }
]

$('#myGrid').grid('setCellCssClasses', cssClasses);
}}}

---------------------------------------

====setCellCssStyles()====
---------------------------------------

====setColumns()====
---------------------------------------

====setData()====
---------------------------------------

====setHeaderRowVisibility()====
---------------------------------------

====setOptions()====
---------------------------------------

====setRowCssClass()====
---------------------------------------

====setSelectedRows()====
---------------------------------------

====setSelectionModel()====
---------------------------------------

====setSortColumn()====
---------------------------------------

====setSortColumns()====
---------------------------------------

====setTopPanelVisibility()====
---------------------------------------

====unregisterPlugin()====
---------------------------------------

====updateCell()====
---------------------------------------

====updateColumnHeader()====
---------------------------------------

====updateRow()====
---------------------------------------

====updateRowCount()====
---------------------------------------

==Events==
====disable(event, data)====
Triggered when the grid is disabled.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====enable(event, data)====
Triggered when the grid is enabled

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onActiveCellChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onActiveCellPositionChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onAddNewRow(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeCellEditorDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeEditCell(event, data)====
Triggered before a cell is edited, return false to prevent editing.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Slick.EventData Slick.EventData]

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*cell*</li>
Type: [http://api.jquery.com/Types/#Integer Integer]

The column index.

<li>*column*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The column object.

<li>*grid*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The slick grid object.

<li>*item*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The row object.

<li>*row*</li>
Type: [http://api.jquery.com/Types/#Integer Integer]

The row index.

</ul>

</ul>

*Example:*
{{{
$('#myGrid').grid({
  data: myData,
  columns: cols,
  rowKey: 'id',
  editable: true,
  onBeforeEditCell: function(event, data) {
    // only allow edits when the value of the price column is greater than 50
    return data.item.price > 50;
  }
});
}}}
---------------------------------------

====onBeforeHeaderCellDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeHeaderRowCellDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onCellChange(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onCellCssStylesChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onClick(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onColumnsReordered(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onColumnsResized(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onContextMenu(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDblClick(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDrag(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDragEnd(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDragInit(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDragStart(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderCellRendered(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderClick(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderContextMenu(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderMouseEnter(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderMouseLeave(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderRowCellRendered(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onKeyDown(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onMouseEnter(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onMouseLeave(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onScroll(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onSelectedRowsChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onSort(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onValidationError(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onViewportChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------