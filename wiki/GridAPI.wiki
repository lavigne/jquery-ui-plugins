=Grid API=
`*` Denotes options, methods & events that are specific to the jQuery UI Plugin Grid (i.e. not part of Slick Grid). Some simply delegate to underlying Slick Grid functionality but are exposed via the jQuery plugin so they can initialized/called like any other jQuery UI plugin option/method/event.

<table cellspacing="10px" style="text-align:left;">
<tr>
  <td><h3>[#Options Options]</h3></td>
  <td><h3>[#Methods Methods]</h3></td>
  <td><h3>[#Events Events]</h3></td>
</tr>
<tr>
  <td>[#asyncEditorLoadDelay asyncEditorLoadDelay]</td>
  <td>[#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass *]</td>
  <td>[#disable() disable *]</td>
</tr>
<tr>
  <td>[#asyncEditorLoading asyncEditorLoading]</td>
  <td>[#addCellCssStyles(key,_hash) addCellCssStyles]</td>
  <td>[#enable() enable *]</td>
</tr>
<tr>
  <td>[#asyncPostRender asyncPostRender]</td>
  <td>[#autosizeColumns() autosizeColumns]</td>
  <td>[#onActiveCellChanged() onActiveCellChanged]</td>
</tr>
<tr>
  <td>[#asyncPostRenderDelay asyncPostRenderDelay]</td>
  <td>[#cancelCurrentEdit() cancelCurrentEdit *]</td>
  <td>[#onActiveCellPositionChanged() onActiveCellPositionChanged]</td>
</tr>
<tr>
  <td>[#autoEdit autoEdit]</td>
  <td>[#canCellBeActive(rowIndex,_columnIndex) canCellBeActive]</td>
  <td>[#onAddNewRow() onAddNewRow]</td>
</tr>
<tr>
  <td>[#autoHeight autoHeight]</td>
  <td>[#canCellBeSelected(rowIndex,_columnIndex) canCellBeSelected]</td>
  <td>[#onBeforeCellEditorDestroy() onBeforeCellEditorDestroy]</td>
</tr>
<tr>
  <td>[#calendarImage calendarImage]</td>
  <td>[#clearCellCssClass(rowKey,_columnName) clearCellCssClass *]</td>
  <td>[#onBeforeDestroy() onBeforeDestroy]</td>
</tr>
<tr>
  <td>[#cellFlashingCssClass cellFlashingCssClass]</td>
  <td>[#clearChangedItems() clearChangedItems *]</td>
  <td>[#onBeforeEditCell(event,_data) onBeforeEditCell]</td>
</tr>
<tr>
  <td>[#columns columns]</td>
  <td>[#clearItemChanges(rowKey) clearItemChanges *]</td>
  <td>[#onBeforeHeaderCellDestroy() onBeforeHeaderCellDestroy]</td>
</tr>
<tr>
  <td>[#data data]</td>
  <td>[#destroy() destroy]</td>
  <td>[#onBeforeHeaderRowCellDestroy() onBeforeHeaderRowCellDestroy]</td>
</tr>
<tr>
  <td>[#dataItemColumnValueExtractor dataItemColumnValueExtractor]</td>
  <td>[#disable() disable *]</td>
  <td>[#onCellChange() onCellChange]</td>
</tr>
<tr>
  <td>[#defaultColumnWidth defaultColumnWidth]</td>
  <td>[#editActiveCell() editActiveCell]</td>
  <td>[#onCellCssStylesChanged() onCellCssStylesChanged]</td>
</tr>
<tr>
  <td>[#defaultFormatter defaultFormatter]</td>
  <td>[#enable() enable *]</td>
  <td>[#onClick() onClick]</td>
</tr>
<tr>
  <td>[#editable editable]</td>
  <td>[#flashCell(rowIndex,_columnIndex,_speed) flashCell]</td>
  <td>[#onColumnsReordered() onColumnsReordered]</td>
</tr>
<tr>
  <td>[#editorFactory editorFactory]</td>
  <td>[#focus() focus]</td>
  <td>[#onColumnsResized() onColumnsResized]</td>
</tr>
<tr>
  <td>[#editorLock editorLock]</td>
  <td>[#getActiveCell() getActiveCell]</td>
  <td>[#onContextMenu() onContextMenu]</td>
</tr>
<tr>
  <td>[#enableAddRow enableAddRow]</td>
  <td>[#getActiveCellNode() getActiveCellNode]</td>
  <td>[#onDblClick() onDblClick]</td>
</tr>
<tr>
  <td>[#enableAsyncPostRender enableAsyncPostRender]</td>
  <td>[#getActiveCellPosition() getActiveCellPosition]</td>
  <td>[#onDrag() onDrag]</td>
</tr>
<tr>
  <td>[#enableCellNavigation enableCellNavigation]</td>
  <td>[#getCanvasNode() getCanvasNode]</td>
  <td>[#onDragEnd() onDragEnd]</td>
</tr>
<tr>
  <td>[#enableColumnReorder enableColumnReorder]</td>
  <td>[#getCellCssClass(rowKey,_columnName) getCellCssClass *]</td>
  <td>[#onDragInit() onDragInit]</td>
</tr>
<tr>
  <td>[#enableTextSelectionOnCells enableTextSelectionOnCells]</td>
  <td>[#getCellCssStyles(key) getCellCssStyles]</td>
  <td>[#onDragStart() onDragStart]</td>
</tr>
<tr>
  <td>[#explicitInitialization explicitInitialization]</td>
  <td>[#getCellEditor() getCellEditor]</td>
  <td>[#onHeaderCellRendered() onHeaderCellRendered]</td>
</tr>
<tr>
  <td>[#forceFitColumns forceFitColumns]</td>
  <td>[#getCellFromEvent(event) getCellFromEvent]</td>
  <td>[#onHeaderClick() onHeaderClick]</td>
</tr>
<tr>
  <td>[#forceSyncScrolling forceSyncScrolling]</td>
  <td>[#getCellFromPoint(x,_y) getCellFromPoint]</td>
  <td>[#onHeaderContextMenu() onHeaderContextMenu]</td>
</tr>
<tr>
  <td>[#formatterFactory formatterFactory]</td>
  <td>[#getCellNode(rowIndex,_columnIndex) getCellNode]</td>
  <td>[#onHeaderMouseEnter() onHeaderMouseEnter]</td>
</tr>
<tr>
  <td>[#fullWidthRows fullWidthRows]</td>
  <td>[#getCellNodeBox() getCellNodeBox]</td>
  <td>[#onHeaderMouseLeave() onHeaderMouseLeave]</td>
</tr>
<tr>
  <td>[#headerRowHeight headerRowHeight]</td>
  <td>[#getChangedItems() getChangedItems *]</td>
  <td>[#onHeaderRowCellRendered() onHeaderRowCellRendered]</td>
</tr>
<tr>
  <td>[#leaveSpaceForNewRows leaveSpaceForNewRows]</td>
  <td>[#getChanges() getChanges *]</td>
  <td>[#onKeyDown() onKeyDown]</td>
</tr>
<tr>
  <td>[#multiColumnSort multiColumnSort]</td>
  <td>[#getColumnIndex(columnName) getColumnIndex]</td>
  <td>[#onMouseEnter() onMouseEnter]</td>
</tr>
<tr>
  <td>[#multiSelect multiSelect]</td>
  <td>[#getColumns() getColumns]</td>
  <td>[#onMouseLeave() onMouseLeave]</td>
</tr>
<tr>
  <td>[#rowHeight rowHeight]</td>
  <td>[#getData() getData *]</td>
  <td>[#onScroll() onScroll]</td>
</tr>
<tr>
  <td>[#rowKey rowKey]</td>
  <td>[#getDataItem(rowIndex) getDataItem]</td>
  <td>[#onSelectedRowsChanged() onSelectedRowsChanged]</td>
</tr>
<tr>
  <td>[#selectedCellCssClass selectedCellCssClass]</td>
  <td>[#getDataLength() getDataLength]</td>
  <td>[#onSort() onSort]</td>
</tr>
<tr>
  <td>[#showHeaderRow showHeaderRow]</td>
  <td>[#getDataView() getDataView *]</td>
  <td>[#onValidationError() onValidationError]</td>
</tr>
<tr>
  <td>[#showTopPanel showTopPanel]</td>
  <td>[#getEditController() getEditController]</td>
  <td>[#onViewportChanged() onViewportChanged]</td>
</tr>
<tr>
  <td>[#topPanelHeight topPanelHeight]</td>
  <td>[#getEditorLock() getEditorLock]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getGridPosition() getGridPosition]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getHeaderRow() getHeaderRow]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getHeaderRowColumn() getHeaderRowColumn]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getItem(rowKey) getItem *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getItems(rowKeys) getItems *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getOptions() getOptions]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getRenderedRange() getRenderedRange]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSelectedRows() getSelectedRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSelectionModel() getSelectionModel]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSlickGrid() getSlickGrid *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getSortColumns() getSortColumns]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getTopPanel() getTopPanel]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#getViewport() getViewport]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#gotoCell(rowIndex,_cellIndex,_forceEdit) gotoCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#init() init]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidate() invalidate]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidateAllRows() invalidateAllRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidateRow(rowIndex) invalidateRow]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#invalidateRows(rowIndicies) invalidateRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#isItemChanged(rowKey) isItemChanged *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#markItemChanged(rowKey,_columnName,_originalValue) markItemChanged *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateDown() navigateDown]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateLeft() navigateLeft]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateNext() navigateNext]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigatePrev() navigatePrev]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateRight() navigateRight]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#navigateUp() navigateUp]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#registerPlugin(plugin) registerPlugin]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#removeCellCssClass(rowKey,_columnName,_classToRemove) removeCellCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#removeCellCssStyles(key) removeCellCssStyles]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#removeRowCssClass() removeRowCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#render() render]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#replaceItem(rowKey,_newItem) replaceItem *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#resetActiveCell() resetActiveCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#resizeCanvas() resizeCanvas]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#saveCurrentEdit() saveCurrentEdit *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#scrollCellIntoView() scrollCellIntoView]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#scrollRowIntoView() scrollRowIntoView]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#scrollRowToTop() scrollRowToTop]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setActiveCell() setActiveCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setCellCssClass(rowKey,_columnName,_cssClass) setCellCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setCellCssClasses(cssData) setCellCssClasses *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setCellCssStyles(key,_hash) setCellCssStyles]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setColumns() setColumns]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setData(data) setData]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setHeaderRowVisibility(visible) setHeaderRowVisibility]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setItem(rowKey,_updatedItem) setItem *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setOptions() setOptions]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setRowCssClass(rowKey,_cssClass) setRowCssClass *]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSelectedRows(rowIndicies) setSelectedRows]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSelectionModel(selectionModel) setSelectionModel]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSortColumn(columnId,_ascending) setSortColumn]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setSortColumns(columns) setSortColumns]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#setTopPanelVisibility() setTopPanelVisibility]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#unregisterPlugin() unregisterPlugin]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateCell() updateCell]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateColumnHeader() updateColumnHeader]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateRow() updateRow]</td>
  <td></td>
</tr>
<tr>
  <td></td>
  <td>[#updateRowCount() updateRowCount]</td>
  <td></td>
</tr>
</table>
==Options==
====asyncEditorLoadDelay====
Delay after which cell editor is loaded. Ignored unless [#asyncEditorLoading asyncEditorLoading] is true.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 100

---------------------------------------

====asyncEditorLoading====
Makes cell editors load asynchronously after a small delay. This greatly increases keyboard navigation speed.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====asyncPostRender====
A callback function that is fired after the cell DOM node has been rendered. This function receives the cell DOM element, rowNumber, data item and column object as parameters. The enableAsyncPostRender option must be set to true for the asyncPostRender function to be called.

*Type:* [http://api.jquery.com/Types/#Function Function]

*Default:* null

*Example:*

Set during initialization:
{{{
// define asyncPostRender function on column definition
var cols = [{
  id : 'onBudget',
  name : 'On Budget',
  field : 'onBudget',
  asyncPostRender: function(cellElement, rowNumber, item, column) {
    if(!item.onBudget) {
      $(cellElement).addClass('error');
    }
  }
}];

// set enableAsyncPostRender & asyncPostRenderDelay grid options
$('#myGrid').grid({
  data: myData,
  columns: cols,
  rowKey: 'name',
  enableAsyncPostRender: true, // this must be set to true or the asyncPostRender function won't fire
  asyncPostRenderDelay: 0 // setting this to 0 makes the asyncPostRender function fire immediately after the cell is rendered
});
}}}

---------------------------------------

====asyncPostRenderDelay====
If [#enableAsyncPostRender enableAsyncPostRender] is set to true, this is the delay in milliseconds after which each column's [GridColumnConfiguration#asyncPostRender asyncPostRender] function is called.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 50

*Example:*

Set during initialization:
{{{
$('#myGrid').grid({
  data: myData,
  columns: columns,
  rowKey: 'name,'
  enableAsyncPostRender: true,
  asyncPostRenderDelay: 5, // call each column's asyncPostRender function 5 milliseconds after the cell is rendered 
});
}}}

---------------------------------------

====autoEdit====
When set to false cells will not automatically go into edit mode when they receive focus.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====autoHeight====
If true and the DOM element the grid is attached to doesn't specify a height, the grid vertically resizes to fit all rows rather than making the grid scrollable. This option has no effect if a static height is defined on the DOM element the grid is attached to. By default autoHeight is set to false and the grid's height is determined by the DOM element the grid is attached to, so if the grid contains more rows than can be displayed the grid becomes scrollable.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====calendarImage====
The location of the calendar icon to be used for editable date fields and date filters.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* http://jquery-ui-plugins.googlecode.com/svn/trunk/examples/images/calendar.png

---------------------------------------

====cellFlashingCssClass====
A CSS class to apply to flashing cells via flashCell().

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* flashing

---------------------------------------

====columns====
The grid column definitions. See GridColumnConfiguration for details.

*Type:* [http://api.jquery.com/Types/#Array Array]

*Default:* 

---------------------------------------

====data====
The data used to populate the grid.

*Type:* [http://api.jquery.com/Types/#Array Array]

*Default:* 

---------------------------------------

====dataItemColumnValueExtractor====
A custom function that can be used to modify the cell value before it's passed to the formatter. In the example below the {{{values}}} field on the row object contains an array and the custom {{{dataItemColumnValueExtractor}}} returns one of the values in the array based on an index field on the column so each value in the {{{values}}} array is displayed in a different column.

*Type:* [http://api.jquery.com/Types/#Function Function]

*Default:* null

*Example:*

Set during initialization:
{{{
var columns = [
  {id: 'name', name: 'Name', field: 'name'},
  {id: 'field1', name: 'Field1', field: 'values', fieldIdx: 0},
  {id: 'field2', name: 'Field2', field: 'values', fieldIdx: 1},
  {id: 'field3', name: 'Field3', field: 'values', fieldIdx: 2}
];

// Get the item column value using a custom 'fieldIdx' column param
function getItemColumnValue(item, column) {
  var values = item[column.field];
  if (column.fieldIdx !== undefined) {
	return values && values[column.fieldIdx];
  } else {
	return values;
  }
}

$('#myGrid').grid({
  data: myData,
  columns: columns,
  rowKey: 'name',
  dataItemColumnValueExtractor: getItemColumnValue
});
}}}

---------------------------------------

====defaultColumnWidth====
Default width of columns. If forceFitColumns is set to true, this option has no effect.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 80

---------------------------------------

====defaultFormatter====
The function used to render cells that are in a column that doesn't have a formatter specified.

*Type:* [http://api.jquery.com/Types/#Function Function]

*Default:* A function that displays the field's value as text.

---------------------------------------

====editable====
Boolean value indicating whether the grid cells can be edited.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====editorFactory====
An object that implements a getEditor(columnDefinition) function that returns the editor for a given column. See [https://github.com/mleibman/SlickGrid/wiki/Writing-custom-cell-editors Custom_Editors].

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* null

---------------------------------------

====editorLock====
A Slick.!EditorLock instance to use for controlling concurrent data edits.

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* Slick.!GlobalEditorLock

---------------------------------------

====enableAddRow====
If true, a blank row will be displayed at the bottom - typing values in that row will add a new one. Must subscribe to onAddNewRow to save values.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====enableAsyncPostRender====
If true, async post rendering will occur and asyncPostRender delegates on columns will be called.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====enableCellNavigation====
If true, grid cells can be navigated using the arrow keys.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====enableColumnReorder====
If true, grid columns can be re-ordered using drag and drop. Column re-ordering requires jquery.event.drag-2.0.js and jquery.event.drop-2.0.js.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====enableTextSelectionOnCells====
When set to false, text selection is disabled in grid cells except in input and textarea elements. This option is IE-specific because it depends on the selectstart event which will only fire in IE.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====explicitInitialization====
Normally [https://github.com/mleibman/SlickGrid/wiki SlickGrid] is initialized when it's created. Use this option to defer initialization and call the init() method manually. This is useful in cases where the grid is created before the DOM element it's attached is inserted into the DOM. See [http://mleibman.github.com/SlickGrid/examples/example-explicit-initialization.html Explicit Initialization Example] for more details.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====forceFitColumns====
Force column sizes to fit into the container (preventing horizontal scrolling). Effectively sets column width to be 1/Number of Columns which on small containers may not be desirable.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====forceSyncScrolling====
When set to true the grid will continuously re-render as the user scrolls so the view stays in sync with the scroll position. If this value is set to false the grid will re-render every 50 milliseconds which can cause the view to be blank if the user is quickly scrolling a large data set.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====formatterFactory====
An object that implements a {{{getFormatter(columnDefinition)}}} function that returns the formatter for a given column.  

*Type:* [http://api.jquery.com/Types/#Object Object]

*Default:* null

*Example:*

Set during initialization:
{{{
var myFormatterFactory = {
  getFormatter: function(column) {
    switch(column.field) {
      case 'onSchedule':
        // custom formatter shows a check mark image when onSchedule is truthy
        return function (rowNum, cellNum, value, columnDef, row) {
          return value ? '<img src="images/tick.png"/>' : '';
        };
        break;
      case 'cost':
        // custom formatter that puts an asertisk on values > 5000
        return function (rowNum, cellNum, value, columnDef, row) {
          return Number(value) > 5000 ? '*' + value : value;
        }
    }
  }
};

$('#myGrid').grid({
  data: myData,
  columns: columns,
  rowKey: 'name'
  formatterFactory: myFormatterFactory
});
}}}

---------------------------------------

====fullWidthRows====
Will expand the table row divs to the full width of the container, table cell divs will remain aligned to the left.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====headerRowHeight====
Height of the secondary header row, this is the row below the column headers where the filters are rendered.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 25

---------------------------------------

====leaveSpaceForNewRows====
When set to true the grid is rendered with empty space at the bottom where new rows can be added. This value is ignored if autoHeight is set to true.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====multiColumnSort====
When true, multi-column sorting is enabled by holding the shift key.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====multiSelect====
When set to true and selectionModel is set to "row", allows the user to select more than one row at a time by click on a row while holding down the shift or ctrl key. Holding down the shift key allows the user to select a range of rows while the holding down the ctrl key is used to select specific rows one at a time.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

---------------------------------------

====rowHeight====
Height in pixels of the grids rows.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 25

---------------------------------------

====rowKey====
The property on each row object that can be used to uniquely identify the row.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* id

---------------------------------------

====selectedCellCssClass====
A CSS class to apply to cells highlighted via setHighlightedCells().

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* selected

---------------------------------------

====showHeaderRow====
Should the secondary header row be displayed, this is the row below the column headers where the filters are rendered. If any column has an inline filter this value is automatically set to true.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

---------------------------------------

====showTopPanel====
When set to true, a third header row is displayed in addition to the column headers row and the inline filter row. The top panel row is useful for displaying a header row with custom conent.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

*Example:*

Set during initialization:
{{{
var grid = $('#myGrid').grid({
  data: myData,
  columns: columns,
  rowKey: 'name',
  showTopPanel: true
});

$('#myCustomHeaderElement').appendTo(grid.getTopPanel()).show();

}}}

---------------------------------------

====topPanelHeight====
If showTopPanel is set to true, sets the height of the top panel, i.e. the 3rd header row that is below the column header row and filter row header.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 25

---------------------------------------

==Methods==
====addCellCssClass(rowKey, columnName, cssClass)====
Add the specified cssClass to the cell at rowKey and columnName. Note that this method only adds the specified class to the list of classes applied to the cell. To set the cell's class attribute to a new value (thus removing any classes previously set on the cell) use [#setCellCssClasses(cssData) setCellCssClasses].

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



 * *cssClass*
 Type: [http://api.jquery.com/Types/#String String]



 The list of CSS classes to apply to the specified cell.

---------------------------------------

====addCellCssStyles(key, hash)====
A Slick grid method that adds css style to cells by row index and column name. To add CSS style by row key and column use [#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass]. This is the add-only sibling to {{{setCellCssStyles(key, hash)}}}. It will throw an exception if you try to set the same {{{key}}} twice without calling {{{removeCellCssStyles()}}}. Use {{{setColumnCssStyles()}}} instead if you don't want that.

 * *key*
 Type: [http://api.jquery.com/Types/#String String]



 A key that can be used to access the hash of styles later, to modify or remove it, for example.

 * *hash*
 Type: [http://api.jquery.com/Types/#Object Object]



 An object that identifies by row index and column name, what styles to apply.

*Example:*

{{{
$('#myGrid').grid('addCellCssStyles', 'myKey',
  {
    2: {
      title: 'error',
      percentComplete: 'warn'
    },
    9: {
      title: 'blue warn',
      start: 'error'
    }
  }
);

}}}

---------------------------------------

====autosizeColumns()====
Automatically resize the columns to fill the entire width of the grid so there is no horizontal scrolling and no extra horizontal space. Essentially this method sets each column width to grid.width/grid.column.count.

*Example:*

{{{
$('#myGrid').grid('autosizeColumns');
}}}

---------------------------------------

====cancelCurrentEdit()====
If there is a cell in edit mode, revert the cell's value and take it out of edit mode.

*Example:*

{{{
$('myGrid').grid('cancelCurrentEdit');
}}}

---------------------------------------

====canCellBeActive(rowIndex, columnIndex)====
Returns a boolean indicating if the cell at {{{row}}} and {{{column}}} can be active.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



*Returns:* [http://api.jquery.com/Types/#Boolean Boolean]

*Example:*

{{{
$('#myGrid').grid('canCellBeSelected', 5, 3);
}}}

---------------------------------------

====canCellBeSelected(rowIndex, columnIndex)====
Returns a boolean indicating if the cell at {{{row}}} and {{{column}}} can be selected.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



*Returns:* [http://api.jquery.com/Types/#Boolean Boolean]

*Example:*

{{{
$('#myGrid').grid('canCellBeSelected', 5, 3);
}}}

---------------------------------------

====clearCellCssClass(rowKey, columnName)====
Remove all CSS classes from the cell at {{{rowKey}}} and {{{columnName}}}.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



*Example:*

{{{
$('#myGrid').grid('clearCellCssClass', '1234', 'price');
}}}

---------------------------------------

====clearChangedItems()====
When the grid is editable, changes made to the data are tracked and can be retrieved using the [#getChangedItems getChangedItems] and [#getChanges getChanges] methods. Changed cells also have the ui-changed-cell class added to them so CSS style can be applied to changed cells. This method removes the ui-changed-cell class from changed cells and clears all change tracking data, making the visible data the new "original" state.

*Example:*

{{{
$('#myGrid').grid('clearChangedItems');
}}}

---------------------------------------

====clearItemChanges(rowKey)====
When the grid is editable, changes made to the data are tracked and can be retrieved using the [#getChangedItems getChangedItems] and [#getChanges getChanges] methods. Changed cells also have the ui-changed-cell class added to them so CSS style can be applied to changed cells. This method removes the ui-changed-cell class and clears all change tracking data from the row at {{{rowKey}}}, making the visible data the new "original" state.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



*Example:*

{{{
$('#myGrid').grid('clearItemChanges', 'row1234');
}}}

---------------------------------------

====destroy()====
Destroy the grid, removing all functionality added by the grid plug in.

*Example:*

{{{
$('#myGrid').grid('destroy');
}}}

---------------------------------------

====disable()====
Disables the grid

*Example:*

{{{
$('#myGrid').grid('disable');
}}}

---------------------------------------

====editActiveCell()====
Put the currently active cell (the one that has focus) into edit mode. This method is really only useful when the [#autoEdit autoEdit] property is set to false, when [#autoEdit autoEdit] is true, cells automatically go into edit mode when they are receive focus on.

*Example:*

{{{
$('#myGrid').grid('editActiveCell');
}}}

---------------------------------------

====enable()====
Enables the grid

*Example:*

{{{
$('#myGrid').grid('enable');
}}}

---------------------------------------

====flashCell(rowIndex, columnIndex, speed)====
Apply and remove [#cellFlashingCssClass cellFlashingCssClass] on the cell at {{{rowIndex}}} and {{{columnIndex}}} at a rate of once every {{{speed}}} milliseconds. The [#cellFlashingCssClass cellFlashingCssClass] is applied and removed twice, creating a flashing effect. Currently the number of times to flash the cell is not configurable.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 * *speed*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 The speed at which to toggle [#cellFlashingCssClass cellFlashingCssClass] in milliseconds

*Example:*

{{{
$('#myGrid').grid('flashCell', 3, 2);
}}}

---------------------------------------

====focus()====
Set focus on the grid.

*Example:*

{{{
$('#myGrid').grid('focus');
}}}

---------------------------------------

====getActiveCell()====
Get the active cell, i.e. the one that currently has focus. This method returns an object containing {{{row}}} and {{{cell}}} properties identifying the row and column indices of the currently active cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getActiveCell');
}}}

---------------------------------------

====getActiveCellNode()====
Get the DOM element of the active cell, i.e. the one that currently has focus.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
$('#myGrid').grid('getActiveCellNode');
}}}

---------------------------------------

====getActiveCellPosition()====
Get the position coordinates of the active cell, i.e. the one that currently has focus. This method returns an object with the bottom, height, left, right, top, visible and width properties of the active cell's DOM element. Please note that in the version of !SlickGrid currently used by this plug in, this method will throw an exception if it is called when there is no active cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getActiveCellPosition');
}}}

---------------------------------------

====getCanvasNode()====
Get the DOM element of the grid canvas.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
$('#myGrid').grid('getCanvasNode');
}}}

---------------------------------------

====getCellCssClass(rowKey, columnName)====
Get the list of css classes that have been applied to the cell at {{{rowKey}}} and {{{columnName}}} via [#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass], [#setCellCssClass(rowKey,_columnName,_cssClass) setCellCssClass] or [#setCellCssClasses(cssData) setCellCssClasses].

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



*Returns:* [http://api.jquery.com/Types/#String String]

*Example:*

{{{
var classList = $('#myGrid').grid('getCellCssClass', 'item1234', 'cost');
}}}

---------------------------------------

====getCellCssStyles(key)====
Get the CSS style hash represented by {{{key}}}. The object returned is a list of styles applied to cells by row index and column name. See [#addCellCssStyles(key,_hash) addCellCssStyles] and [#setCellCssStyles(key,_hash) setCellCssStyles] for details.

 * *key*
 Type: [http://api.jquery.com/Types/#String String]



 The key identifying a set of CSS styles applied using [#addCellCssStyles(key,_hash) addCellCssStyles] or [#setCellCssStyles(key,_hash) setCellCssStyles].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var styleHash = $('#myGrid').grid('getCellCssStyles', 'styleHashKey');
}}}

---------------------------------------

====getCellEditor()====
Get the cell editor of the cell currently being edited, if any. The returned object is an editor that follows the !SlickGrid editor interface outlined [https://github.com/mleibman/SlickGrid/wiki/Writing-custom-cell-editors here].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var cellEditor = $('#myGrid').grid('getCellEditor');
}}}

---------------------------------------

====getCellFromEvent(event)====
Get the cell closest to the target of the given {{{event}}}. The returned cell object has two properties, row and cell which are the row and column index of the cell closest to the event.

 * *event*
 Type: [http://api.jquery.com/Types/#Event Event]



 The {{{event}}} for which to get the cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var cell = $('#myGrid').grid('getCellFromEvent', event);
}}}

---------------------------------------

====getCellFromPoint(x, y)====
Get the cell closest to the given {{{x}}}, {{{y}}} coordinate. This method returns an object with {{{row}}} and {{{cell}}} properties identifying the row and column index of the cell closest to {{{x}}}, {{{y}}}. This method always retuns an object and appears to have some issues, especially if the point provided is outside the grid coordinates. For example, passing in 0, 0 returns {row: 0, cell: -1}. If the x coordinate is beyond the edge of the grid, the cell index predictably returns the index of the last column, however if the y coordinate is beyond the bottom edge of the grid the row index returned will be a number that is higher than the row count.

 * *x*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 * *y*
 Type: [http://api.jquery.com/Types/#Integer Integer]



*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getCellFromPoint', 100, 150);
}}}

---------------------------------------

====getCellNode(rowIndex, columnIndex)====
Get the DOM element of the cell at {{{rowIndex}}} and {{{columnIndex}}}.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



 * *columnIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
$('#myGrid').grid('getCellNode', 20, 5);
}}}

---------------------------------------

====getCellNodeBox()====
Get the box coordinates of the cell at {{{rowIndex}}} and {{{columnIndex}}}. This method returns an object with the {{{top}}}, {{{left}}}, {{{bottom}}} and {{{right}}} properties of the cell.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('getCellNodeBox', 20, 5);
}}}

---------------------------------------

====getChangedItems()====
Get row objects with cells that have been edited and changed. This method only returns rows that have cells with a value that is different than their original value, that is, if a cell value has been changed and then reverted back to it's original value, the cell is not considered "changed". To clear all tracked changes and make the current state of the grid the "original" state, use [#clearChangedItems() clearChangedItems].

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var changedItems = $('#myGrid').grid('getChangedItems');
}}}

---------------------------------------

====getChanges()====
Get a list of changed cell values. This method returns an Array of objects with two properties, the first property is named whatever was specified as the [#rowKey rowKey] for the grid and the second property is an Array of change objects named "changes". The change objects have {{{field}}}, {{{newValue}}} and {{{oldValue}}} properties identifying what changed on each field for the row.

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var changes = $('#myGrid').grid('getChanges');
// below is an example of what the returned changes array might look like
[
  {
    employeeNumber: '1234',
    changes: [
      {field: 'name', newValue: 'Tom', oldValue: 'Thomas'},
      {field: 'title', newValue: 'Sr. Developer', oldValue: 'Jr. Developer'}
    ]
  },
  {
    employeeNumber: '5678',
    changes: [
      {field: 'name', newValue: 'Dave', oldValue: 'David'}
    ]
  }
]

}}}

---------------------------------------

====getColumnIndex(columnName)====
Get the column index of {{{columnName}}}.

 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



*Returns:* [http://api.jquery.com/Types/#Integer Integer]

*Example:*

{{{
var firstNameIndex = $('#myGrid').grid('getColumnIndex', 'firstName');
}}}

---------------------------------------

====getColumns()====
Get the columns Array

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var columns = $('#myGrid').grid('getColumns');
}}}

---------------------------------------

====getData()====
Get the array of data displayed in the grid in it's current state.

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var data = $('#myGrid').grid('getData');
}}}

---------------------------------------

====getDataItem(rowIndex)====
Get the row item at {{{rowIndex}}}.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#Integer Integer]



*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var fifthRow = $('#myGrid').grid('getDataItem', 5);
}}}

---------------------------------------

====getDataLength()====
Get the number of rows in the grid.

*Returns:* [http://api.jquery.com/Types/#Integer Integer]

*Example:*

{{{
var rowCount = $('#myGrid').grid('getDataLength');
}}}

---------------------------------------

====getDataView()====
Get the !DataView object used by !SlickGrid to render the grid.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var dataView = $('#myGrid').grid('getDataView');
}}}

---------------------------------------

====getEditController()====
Get the edit controller, which is an object responsible for managing cell edits. In general it is recommended to call the [#saveCurrentEdit() saveCurrentEdit] and [#cancelCurrentEdit() cancelCurrentEdit] methods instead of calling methods on the edit controller directly as those methods check for an edit lock before delegating to the underlying edit controller.

*Returns:* [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*cancelCurrentEdit*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*commitCurrentEdit*</li>
Type: [http://api.jquery.com/Types/#Function Function]

</ul>

*Example:*

{{{
var editController = $('#myGrid').grid('getEditController');
}}}

---------------------------------------

====getEditorLock()====
Get the Slick.!EditorLock object that manages concurrent cell edits. In general it is recommended to call the [#saveCurrentEdit() saveCurrentEdit] and [#cancelCurrentEdit() cancelCurrentEdit] methods instead of calling methods on the editor lock directly as those methods check for an edit lock and then delegate to the underlying edit controller.

*Returns:* [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*activate*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*cancelCurrentEdit*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*commitCurrentEdit*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*deactivate*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*isActive*</li>
Type: [http://api.jquery.com/Types/#Function Function]

</ul>

*Example:*

{{{
var editorLock = $('#myGrid').grid('getEditorLock');
}}}

---------------------------------------

====getGridPosition()====
Get an object containing position information about the grid.

*Returns:* [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*bottom*</li>
Type: [http://api.jquery.com/Types/#Number Number]

<li>*height*</li>
Type: [http://api.jquery.com/Types/#Number Number]

<li>*left*</li>
Type: [http://api.jquery.com/Types/#Number Number]

<li>*right*</li>
Type: [http://api.jquery.com/Types/#Number Number]

<li>*top*</li>
Type: [http://api.jquery.com/Types/#Number Number]

<li>*visible*</li>
Type: [http://api.jquery.com/Types/#Boolean Boolean]

<li>*width*</li>
Type: [http://api.jquery.com/Types/#Number Number]

</ul>

*Example:*

{{{
var position = $('#myGrid').grid('getGridPosition');
}}}

---------------------------------------

====getHeaderRow()====
Get the secondary header row DOM element. This is the header row where filters are rendered, below the column name headers.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
var headerRow = $('#myGrid').grid('getHeaderRow');
}}}

---------------------------------------

====getHeaderRowColumn()====
Get the secondary header row column DOM element for the columns specified by {{{columnId}}}. The secondary header row is the header row where filters are rendered, below the column name headers.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
var headerRowColumn = $('#myGrid').grid('getHeaderRowColumn', 'lastName');
}}}

---------------------------------------

====getItem(rowKey)====
Get the item (row object) for the row specified by {{{rowKey}}}.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var item = $('#myGrid').grid('getItem', 'row1234');
}}}

---------------------------------------

====getItems(rowKeys)====
Get the items (row objects) for the rows specified by {{{rowKeys}}}.

 * *rowKeys*
 Type: [http://api.jquery.com/Types/#Array Array]



 An array of rowKey strings

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var items = $('#myGrid').grid('getItems', ['row1234', 'row5678']);
}}}

---------------------------------------

====getOptions()====
Get the grid options.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var options = $('#myGrid').grid('getOptions');
}}}

---------------------------------------

====getRenderedRange()====
Get a range object defining the currently rendered portion of the grid which includes the viewable portion of the grid (viewport) as well as a small buffer of content that is rendered just outside the bounds of the viewport.

*Returns:* [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*bottom*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The index of last row that is currently rendered.

<li>*leftPx*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The location of the leftmost pixel that is currently rendered.

<li>*rightPx*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The location of the rightmost pixel that is currently rendered.

<li>*top*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The index of top row that is currently rendered.

</ul>

*Example:*

{{{
var renderedRange = $('#myGrid').grid('getRenderedRange');
}}}

---------------------------------------

====getSelectedRows()====
Gets an array containing the row indicies of the currently selected rows

*Returns:* [http://api.jquery.com/Types/#Array Array]

*Example:*

{{{
var selectedRows = $('#myGrid').grid('getSelectedRows');
}}}

---------------------------------------

====getSelectionModel()====
Get the selection model used by the grid. The returned object is a Slick.!SelectionModel following the interface defined <a href="https://github.com/mleibman/SlickGrid/wiki/Handling-selection">here</a>.

*Returns:* [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*destroy*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*init*</li>
Type: [http://api.jquery.com/Types/#Function Function]

<li>*onSelectedRangesChanged*</li>
Type: [http://api.jquery.com/Types/#Event Event]

</ul>

*Example:*

{{{
var selectionModel = $grid.grid('getSelectionModel');
}}}

---------------------------------------

====getSlickGrid()====
Get the underlying <a href="https://github.com/mleibman/SlickGrid">!SlickGrid</a> object backing the grid.

*Returns:* [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
var slickGrid = $grid.grid('getSlickGrid')
}}}

---------------------------------------

====getSortColumns()====
Get the list of columns that the grid is currently sorted by. The array returned contains column objects containing {{{columnId}}} and {{{sortAsc}}} attributes.

*Returns:* [http://api.jquery.com/Types/#Array Array]

<ul>

<li>*columnId*</li>
Type: [http://api.jquery.com/Types/#String String]

<li>*sortAsc*</li>
Type: [http://api.jquery.com/Types/#Boolean Boolean]

</ul>

*Example:*

{{{
var sortColumns = $grid.grid('getSortColumns');
}}}

---------------------------------------

====getTopPanel()====
Get the top panel DOM element, which is a third header row that is displayed below the column headers and inline filter row. The top panel row is only diplayed if [#showTopPanel showTopPanel] is set to true.

*Returns:* [http://api.jquery.com/Types/#Element Element]

*Example:*

{{{
var topPanel = $grid.grid('getTopPanel');
}}}

---------------------------------------

====getViewport()====
Get a range object defining the portion of the grid that is currently in view.

*Returns:* [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*bottom*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The index of last row that is currently in view.

<li>*leftPx*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The location of the leftmost pixel that is currently in view.

<li>*rightPx*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The location of the rightmost pixel that is currently in view.

<li>*top*</li>
Type: [http://api.jquery.com/Types/#Number Number]

The index of top row that is currently in view.

</ul>

*Example:*

{{{
var viewport = $('#myGrid').grid('viewport');
}}}

---------------------------------------

====gotoCell(rowIndex, cellIndex, forceEdit)====
Select the cell at {{{rowIndex}}} and {{{cellIndex}}}. If {{{forceEdit}}} is true, the cell will be put into edit mode.  Note that if the [#autoEdit autoEdit] option is set to true (which is the default), the cell will go into edit mode even if false is passed for {{{forceEdit}}}.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#String String]



 * *cellIndex*
 Type: [http://api.jquery.com/Types/#String String]



 * *forceEdit*
 Type: [http://api.jquery.com/Types/#Boolean Boolean]



*Example:*

{{{
var selectedCell = $('#myGrid').grid('gotoCell', 2, 3, true);
}}}

---------------------------------------

====init()====
Initialize the grid, this method is called internally by !SlickGrid when the grid is created and subsequent calls are ignored. It is documented here only for completeness because it is exposed as part of !SlickGrid's public API.

---------------------------------------

====invalidate()====
Invalidate all cached row data and re-render the entire grid. Call this method to render changes that have been made to grid data.

*Example:*

{{{
var $grid = $('#myGrid')
;var data = $grid.grid('getData');
data[2].project = 'New Project Name';
$grid.grid('invalidate');
}}}

---------------------------------------

====invalidateAllRows()====
Invalidate all cached row data. Unlike [#invalidate invalidate], this method does not re-render the grid so a separate call must be made to [#render render] for changes in grid data to be reflected in the view.

*Example:*

{{{
var $grid = $('#myGrid');
var data = $grid.grid('getData');
data[2].project = 'New Project Name';
$grid.grid('invalidateAllRows');
$grid.grid('render'); // need this for the data update to be reflected in the view
}}}

---------------------------------------

====invalidateRow(rowIndex)====
Invalidate cached row data for the row at {{{rowIndex}}}. Unlike [#invalidate invalidate], this method does not re-render the grid so a separate call must be made to [#render render] for changes in grid data to be reflected in the view.

 * *rowIndex*
 Type: [http://api.jquery.com/Types/#String String]



*Example:*

{{{
var $grid = $('#myGrid');
var data = $grid.grid('getData');
data[2].project = 'New Project Name';
$grid.grid('invalidateRow', 2);
$grid.grid('render'); // need this for the data update to be reflected in the view
}}}

---------------------------------------

====invalidateRows(rowIndicies)====
Invalidate cached row data for the rows specified by the {{{rowIndicies}}} parameter. Unlike [#invalidate invalidate], this method does not re-render the grid so a separate call must be made to [#render render] for changes in grid data to be reflected in the view.

 * *rowIndicies*
 Type: [http://api.jquery.com/Types/#Array Array]



 An array of row indicies specifying which rows to invalidate (remove from cache).

*Example:*

{{{
var $grid = $('#myGrid');
var data = $grid.grid('getData');
data[2].project = 'New Project Name';
data[4].project = 'Another New Project Name';
$grid.grid('invalidateRows', [2, 4]);
$grid.grid('render'); // need this for the data update to be reflected in the view
}}}

---------------------------------------

====isItemChanged(rowKey)====
Check if the row at {{{rowKey}}} has been changed.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



*Returns:* [http://api.jquery.com/Types/#Boolean Boolean]

*Example:*

{{{
var isChanged = $('#myGrid').grid('isItemChanged', 'myrowkey');
}}}

---------------------------------------

====markItemChanged(rowKey, columnName, originalValue)====
Mark the cell at {{{rowKey}}} and {{{columnName}}} as "changed", which means the cell will have the ui-changed-cell class added to it and it will be returned by the [#getChangedItems getChangedItems] and [#getChanges getChanges] methods.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



 * *originalValue*
 Type: [http://api.jquery.com/Types/#String String]



 The value to be stored as the "original" value of the cell, i.e. the value before the change occurred. This value is tracked and can be retrieved later by calling the [#getChanges getChanges] method which will return an array of objects containing a rowKey and an array of changes made to each row by field.

*Example:*

{{{
$('#myGrid').grid('markItemChanged', 'myrowkey', 'firstName', 'Johnny');
}}}

---------------------------------------

====navigateDown()====
Move focus to the cell below the currently active cell. If the currently active cell is in the bottom row, focus doesn't change. If there is no active cell this method has no effect.

*Example:*

{{{
$('#myGrid').grid('navigateDown');
}}}

---------------------------------------

====navigateLeft()====
Move focus to the cell to the left of the currently active cell. If the currently active cell is in the leftmost column, focus doesn't change. If there is no active cell this method has no effect.

*Example:*

{{{
$('#myGrid').grid('navigateLeft');
}}}

---------------------------------------

====navigateNext()====
Move focus from the currently active cell to the "next" cell. This method traverses the grid from left to right, top to bottom, so "next" means focus is moved to the cell to the right of the currently active cell or if the currently active cell is in the rightmost column, focus is moved to the leftmost cell in the row below the currently active cell. If focus is on the rightmost cell of the bottom row or there is no active cell this method has no effect.

*Example:*

{{{
$('#myGrid').grid('navigateNext');
}}}

---------------------------------------

====navigatePrev()====
Move focus from the currently active cell to the "previous" cell. This method traverses the grid from right to left, bottom to top, so "previous" means focus is moved to the cell to the left of the currently active cell or if the currently active cell is in the leftmost column, focus is moved to the rightmost cell in the row above the currently active cell. If focus is on the leftmost cell of the top row or there is no active cell this method has no effect.

*Example:*

{{{
$('#myGrid').grid('navigatePrev');
}}}

---------------------------------------

====navigateRight()====
Move focus to the cell to the right of the currently active cell. If the currently active cell is in the righttmost column, focus doesn't change. If there is no active cell this method has no effect.

*Example:*

{{{
$('#myGrid').grid('navigateRight');
}}}

---------------------------------------

====navigateUp()====
Move focus to the cell above of the currently active cell. If the currently active cell is in the top row, focus doesn't change. If there is no active cell this method has no effect.

*Example:*

{{{
$('#myGrid').grid('navigateUp');
}}}

---------------------------------------

====registerPlugin(plugin)====
Register a plugin with the underlying !SlickGrid. In this context, a plugin is an object that must implement {{{init}}} and {{{destroy}}} methods. Calling this method executes the plugin's {{{init}}} method passing it the !SlickGrid object as a parameter. See !SlickGrid's <a href="https://github.com/mleibman/SlickGrid/blob/master/plugins/slick.autotooltips.js">auto tooltip plugin</a> for a simple example.

 * *plugin*
 Type: [http://api.jquery.com/Types/#Object Object]



*Example:*

{{{
$('#myGrid').grid('registerPlugin', new Slick.AutoTooltips());
}}}

---------------------------------------

====removeCellCssClass(rowKey, columnName, classToRemove)====
Remove the CSS class specified by {{{classToRemove}}} from the cell at {{{rowKey}}}, {{{columnName}}}.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



 * *classToRemove*
 Type: [http://api.jquery.com/Types/#String String]



*Example:*

{{{
$('#myGrid').grid('removeCellCssClass', 'row1234', 'First Name', 'highlight');
}}}

---------------------------------------

====removeCellCssStyles(key)====
Remove CSS styles from specific grid cells that were set using [#setCellCssStyles(key,_hash) setCellCssStyles(key, hash)]. See the <a href="https://github.com/mleibman/SlickGrid/wiki/API-Reference">!SlickGrid Cell API</a> and [#setCellCssStyles(key,_hash) setCellCssStyles(key, hash)] for details.

 * *key*
 Type: [http://api.jquery.com/Types/#String String]



 The name of the set of styles to remove, as specified when the styles were applied using [#setCellCssStyles(key,_hash) setCellCssStyles(key, hash)].

*Example:*

{{{
$('#myGrid').grid('removeCellCssStyles', 'highlight');
}}}

---------------------------------------

====removeRowCssClass()====
---------------------------------------

====render()====
---------------------------------------

====replaceItem(rowKey, newItem)====
Replace the item at {{{rowKey}}} with {{{newItem}}}. The difference between this method and [#setItem setItem] is that this method allows the new item to have a different rowKey than the item being replaced. If you don't need to update the item's rowKey, using [#setItem setItem] is more efficient.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *newItem*
 Type: [http://api.jquery.com/Types/#Object Object]



*Example:*

{{{
$('#myGrid').grid('replaceItem', 'ItemId1234', myNewItemObject);
}}}

---------------------------------------

====resetActiveCell()====
---------------------------------------

====resizeCanvas()====
---------------------------------------

====saveCurrentEdit()====
---------------------------------------

====scrollCellIntoView()====
---------------------------------------

====scrollRowIntoView()====
---------------------------------------

====scrollRowToTop()====
---------------------------------------

====setActiveCell()====
---------------------------------------

====setCellCssClass(rowKey, columnName, cssClass)====
Set the css class of the cell at rowKey and columnName to cssClass, thus removing any class set on the cell previously by setCellCssClass, addCellCssClass or setCellCssClasses.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *columnName*
 Type: [http://api.jquery.com/Types/#String String]



 * *cssClass*
 Type: [http://api.jquery.com/Types/#String String]



 The list of CSS classes to apply to the specified cell.

---------------------------------------

====setCellCssClasses(cssData)====
Method to set CSS classes on several cells in one call. The cssData parameter is an array of objects containing, by row, a list of CSS classes to apply to columns.

 * *cssData*
 Type: [http://api.jquery.com/Types/#Array Array]



 An array of objects identifying, by row and column, a list of classes to apply to specific cells.

*Example:*

{{{
var cssClasses = [
  {
    rowKey: 'row1234',
    cellClasses: {'column1': 'error', 'column3': 'warning anotherClass'}
  },
  {
    rowKey: 'row4567',
    cellClasses: {'column1': 'warning'}
  }
];

$('#myGrid').grid('setCellCssClasses', cssClasses);
}}}

---------------------------------------

====setCellCssStyles(key, hash)====
Sets CSS classes on specific grid cells by row index and column name. If you're looking for a way to apply CSS by row key and column name see [#setCellCssClass(rowKey,_columnName,_cssClass) setCellCssClass], [#setCellCssClasses(cssData) setCellCssClasses] and [#addCellCssClass(rowKey,_columnName,_cssClass) addCellCssClass]. The {{{key}}} parameter is a name given to the set of styles so it can be referenced later to modify or remove it. The {{{hash}}} parameter is an object containing CSS classes to apply to cells by row index and column name. See the example below or <a href="https://github.com/mleibman/SlickGrid/wiki/API-Reference">the !SlickGrid API</a> for more details.

 * *key*
 Type: [http://api.jquery.com/Types/#String String]



 A name given to the set of styles that can be referenced later to update the styles applied by calling setCellCssStyles again, or removed by calling [#removeCellCssStyles(key) removeCellCssStyles].

 * *hash*
 Type: [http://api.jquery.com/Types/#Object Object]



 An object with row index attribute keys that point to objects containing column name keys and CSS class values identifying which classes to apply to each column in the row.

*Example:*

{{{
var styleHash = {
0: { // row at index 0
  project: 'error warn', // apply the error and warn classes to the 'project' column
  cost: 'error' // apply the 'error' class to the 'cost' column
},
4: {
  duration: 'warn',
  cost: 'error'
  }
};

$('#myGrid').grid('setCellCssStyles', 'highlight', styleHash);

}}}

---------------------------------------

====setColumns()====
---------------------------------------

====setData(data)====
Set the grid data to the values in the data parameter. When calling this method either render or invalidate must also be called to render the new data.

 * *data*
 Type: [http://api.jquery.com/Types/#Array Array]



*Example:*

{{{
var $grid = $('#myGrid');
$grid.grid('setData', getData());
$grid.grid('invalidate');
}}}

---------------------------------------

====setHeaderRowVisibility(visible)====
Show or hide the header row which is actually the second header row that displays the inline filters. This method updates the showHeaderRow option.

 * *visible*
 Type: [http://api.jquery.com/Types/#Boolean Boolean]



*Example:*

{{{
$('#myGrid').grid('setHeaderRowVisibility', false);
}}}

---------------------------------------

====setItem(rowKey, updatedItem)====
Update the item (i.e. row) with the id of {{{rowKey}}} to {{{item}}}. The difference between this method and [#replaceItem replaceItem] is that you cannot change the item's rowKey when calling setItem. If you don't need to change the item's rowKey using setItem is more efficient that replaceItem.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *updatedItem*
 Type: [http://api.jquery.com/Types/#Object Object]



*Example:*

{{{
$('#myGrid').grid('setItem', 'ItemId1234', myNewItemObject);
}}}

---------------------------------------

====setOptions()====
---------------------------------------

====setRowCssClass(rowKey, cssClass)====
Set the css class of the row at rowKey to the list of classes specified by cssClass.

 * *rowKey*
 Type: [http://api.jquery.com/Types/#String String]



 * *cssClass*
 Type: [http://api.jquery.com/Types/#String String]



*Example:*

{{{
$('#myGrid').grid('setRowCssClass', 'Project 5', 'error');
}}}

---------------------------------------

====setSelectedRows(rowIndicies)====
Set the selected rows to the rows specified by rowIndicies.

 * *rowIndicies*
 Type: [http://api.jquery.com/Types/#Array Array]



*Example:*

{{{
$('#myGrid').grid('setSelectedRows', [2, 5, 7]);
}}}

---------------------------------------

====setSelectionModel(selectionModel)====
Set the selection model for the grid. The selectionModel parameter can be either a string or an object identifying the type of selection used by the grid. To use the built-in !RowSelectionModel or !CellSelectionModel implementation, enter a string value of "row" or "cell". To use a custom selection model pass an object that implements the Slick.SelectionModel interface as defined <a href="https://github.com/mleibman/SlickGrid/wiki/Handling-selection">here</a>.

 * *selectionModel*
 Type: [http://api.jquery.com/Types/#String String] or [http://api.jquery.com/Types/#Object Object]

*Example:*

{{{
$('#myGrid').grid('setSelectionModel', 'row');
}}}

---------------------------------------

====setSortColumn(columnId, ascending)====
This method updates the sort icon on the column identified by columnId to the up/down arrow icon based on the value of the ascending parameter. This method does not actually sort the data.

 * *columnId*
 Type: [http://api.jquery.com/Types/#String String]



 * *ascending*
 Type: [http://api.jquery.com/Types/#Boolean Boolean]



*Example:*

{{{
$('#myGrid').grid('setSortColumn', 'projectName', true);
}}}

---------------------------------------

====setSortColumns(columns)====
This method updates the sort icon on multiple columns at once by passing in an array of objects with columnId and sortAsc parameters. This method does not actually sort the data.

 * *columns*
 Type: [http://api.jquery.com/Types/#Array Array]



 An array of objects with columnId and sortAsc attributes

*Example:*

{{{
$('#myGrid').grid('setSortColumns', [{columnId: 'project', sortAsc: true}, {columnId: 'start', sortAsc: false}]);
}}}

---------------------------------------

====setTopPanelVisibility()====
---------------------------------------

====unregisterPlugin()====
---------------------------------------

====updateCell()====
---------------------------------------

====updateColumnHeader()====
---------------------------------------

====updateRow()====
---------------------------------------

====updateRowCount()====
---------------------------------------

==Events==
====disable(event, data)====
Triggered when the grid is disabled.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====enable(event, data)====
Triggered when the grid is enabled

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Event Event]

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onActiveCellChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onActiveCellPositionChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onAddNewRow(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeCellEditorDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeEditCell(event, data)====
Triggered before a cell is edited, return false to prevent editing.

<ul>
<li>*event*</li>
Type: [http://api.jquery.com/Types/#Slick.EventData Slick.EventData]

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

<ul>

<li>*cell*</li>
Type: [http://api.jquery.com/Types/#Integer Integer]

The column index.

<li>*column*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The column object.

<li>*grid*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The slick grid object.

<li>*item*</li>
Type: [http://api.jquery.com/Types/#Object Object]

The row object.

<li>*row*</li>
Type: [http://api.jquery.com/Types/#Integer Integer]

The row index.

</ul>

</ul>

*Example:*
{{{
$('#myGrid').grid({
  data: myData,
  columns: cols,
  rowKey: 'id',
  editable: true,
  onBeforeEditCell: function(event, data) {
    // only allow edits when the value of the price column is greater than 50
    return data.item.price > 50;
  }
});
}}}
---------------------------------------

====onBeforeHeaderCellDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onBeforeHeaderRowCellDestroy(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onCellChange(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onCellCssStylesChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onClick(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onColumnsReordered(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onColumnsResized(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onContextMenu(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDblClick(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDrag(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDragEnd(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDragInit(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onDragStart(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderCellRendered(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderClick(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderContextMenu(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderMouseEnter(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderMouseLeave(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onHeaderRowCellRendered(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onKeyDown(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onMouseEnter(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onMouseLeave(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onScroll(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onSelectedRowsChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onSort(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onValidationError(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------

====onViewportChanged(event, data)====
<ul>
<li>*event*</li>
Type: Slick.!EventData

<li>*data*</li>
Type: [http://api.jquery.com/Types/#Object Object]

</ul>

---------------------------------------