=Grid Column Configuration=
A large part of the grid's functionality is configured by defining attributes on the column objects provided to the grid at initialization. The following example demonstrates a fairly extensive column configuration using sorting, filtering and in-line editing. For a complete list of column attributes see the [#Column_Attributes Column Attribute API].

==Column Attributes==
 * [#cssClass cssClass]
 * [#editor editor]
 * [#field field]
 * [#filter filter]
 * [#filterDefault filterDefault]
 * [#focusable focusable]
 * [#formatter formatter]
 * [#headerCssClass headerCssClass]
 * [#id id]
 * [#minWidth minWidth]
 * [#maxWidth maxWidth]
 * [#name name]
 * [#rerenderOnResize rerenderOnResize]
 * [#resizable resizable]
 * [#selectable selectable]
 * [#sort sort]
 * [#toolTip toolTip]
 * [#width width]
---------------------------------------
==Column Attributes API==
====cssClass====
CSS class applied to the column.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',		
      cssClass: 'myClass'
    }
  ]
});
}}}
---------------------------------------
====editor====
The editor for cell edits. This can be a String representing one of the [#Build-In_Editors pre-defined editors], an Array 
identifying a list of values for a drop-down editor, or a function defining a [#Custom_Editors custom editor]. For examples
of each type of editor see the [#Editing Editing] section.

*Type:* [http://api.jquery.com/Types/#String String] OR [http://api.jquery.com/Types/#Array Array] OR [http://api.jquery.com/Types/#Function Function]

*Default:* null

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',		
      editor: 'text'
    }
  ]
});
}}}
---------------------------------------
====field====
Required, the property on the data object that is used to get the value displayed in the column cells.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title'
    }
  ]
});
}}}
---------------------------------------
====filter====
A string, array or function identifying a filter to be rendered in the column header. A string can be used to 
specify one of the built-in filters, a list of strings or name/value pair objects can be used to specify a drop down
list filter or a function can be used to specify a custom filter. For examples of each type of filter see the
[#Filtering Filtering] section.

*Type:* [http://api.jquery.com/Types/#String String], [http://api.jquery.com/Types/#Array Array] OR [http://api.jquery.com/Types/#Function Function]

*Default:* null

*Example*
This example demonstrates using an object array of name/value pairs to create a drop down filter filter.
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      filter: [
        {'name': 'Yes', 'value': 'true'},
        {'name': 'No', 'value': 'false'}
      ], 
    }
  ]
});
}}}
---------------------------------------
====filter====
A string, array or function identifying a filter to be rendered in the column header. A string can be used to 
specify one of the built-in filters, a list of strings or name/value pair objects can be used to specify a drop down
list filter or a function can be used to specify a custom filter. For examples of each type of filter see the
[#Filtering Filtering] section.

*Type:* [http://api.jquery.com/Types/#String String], [http://api.jquery.com/Types/#Array Array] OR [http://api.jquery.com/Types/#Function Function]

*Default:* null

*Example*
This example demonstrates using an object array of name/value pairs to create a drop down filter filter.
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      filter: [
        {'name': 'Yes', 'value': 'true'},
        {'name': 'No', 'value': 'false'}
      ], 
    }
  ]
});
}}}
---------------------------------------
====filterDefault====
Default filter value selected when the grid is rendered.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Current Customer',
      field: 'currentCustomer',
      filter: ["true", "false"], // simple string array filter
      filterDefault: "true" // default to only showing current customers
    }
  ]
});
}}}
--------------------------------------- 
====headerCssClass====
CSS class applied to the column header.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      headerCssClass: 'myHeaderClass'
    }
  ]
});
}}}
--------------------------------------- 
====id====
A unique identifier for the column within the grid. Note that id is often the 
same as field, but having a different value for id can be useful for displaying 
the same data differently in multiple columns, using different [#Formatting_Column_Data formatters].

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      id: 'title1',
      name: 'Title',
      field: 'title'
    }
  ]
});
}}}
--------------------------------------- 
====minWidth====
Minimum width of the column.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* 30

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      minWidth: 50
    }
  ]
});
}}}
--------------------------------------- 
====maxWidth====
Maximum width of the column.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* null

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      maxWidth: 200
    }
  ]
});
}}}
--------------------------------------- 
====name====
Text displayed in the column header label.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
    }
  ]
});
}}}
--------------------------------------- 
====rerenderOnResize====
Boolean value indicating whether the column should be re-rendered when it's resized.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* false

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      rerenderOnResize: true
    }
  ]
});
}}} 
--------------------------------------- 
====resizable====
Boolean value indicating whether the column can be resized.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      resizable: false
    }
  ]
});
}}}
--------------------------------------- 
====selectable====
Boolean value indicating whether the column can be selected.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      selectable: false
    }
  ]
});
}}},
--------------------------------------- 
====sort====
String, Boolean or Function identifying the type of sorting used by the column. Using a boolean value toggles
the default text sorting on/off. By default all columns use a text sort so you must specify sort: false to
turn off sorting. A string value can be used to specifiy one of the build-in sort functions 'numeric' or 'date'.
Finally a custom function can be provided that will receive two row objects to compare and return a numeric 
result.

*Type:* [http://api.jquery.com/Types/#String String], [http://api.jquery.com/Types/#Boolean Boolean] OR [http://api.jquery.com/Types/#Function Function]

*Default:* true

*Example*
This example demonstrates a very simple (and non-realistic) example of a custom sort that sorts an alpha-numeric column
in numeric order.  The "Task" column is assumed to contain values with the word "task" follwed by a number. The sort 
function strips the string "task" from each row's task value and returns the result of a numeric comparison of the 
remaining value, thus sorting the "Task" column in numeric order.
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Task',
      field: 'task',
      sort: function(row1, row2) {
        var val = Number(row1['task'].substring(4));
        var val2 = Number(row2['task'].substring(4));				
        return (val == val2 ? 0 : (val > val2 ? 1 : -1));	
      },
    }
  ]
});
}}} 
--------------------------------------- 
====toolTip====
A string to be displayed as a tool tip when the cursor hovers over the column header.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ''

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      toolTip: 'This is the title column'
    }
  ]
});
}}},
--------------------------------------- 
====width====
Width of the column.

*Type:* [http://api.jquery.com/Types/#Integer Integer]

*Default:* null

*Example*
{{{
$('#myGrid').grid({
  columns: [
    {
      name: 'Title',
      field: 'title',
      width: 75
    }
  ]
});
}}},
---------------------------------------

==Formatting Column Data==

==Editing==

===Built-In Editors===

===Custom Editors===