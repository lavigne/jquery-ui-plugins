#summary JQuery UI based textarea widget that provides maximum character length and text selection functionality.
#labels Featured

=Summary=
A JQuery UI based textarea widget that provides maximum character length and text selection functionality. The maximum character limit is correctly enforced whether the user types in the textarea or pastes content into it. There are known issues with how Opera handles pasted content.

=Example=
As you can see from the following screen shot the widget automatically renders a character limit message which is updated as the user types or pastes content into the textara. There are also events triggered as the textarea content is updated, allowing you to provide callback functions to react to user input.

<img src="https://jquery-ui-plugins.googlecode.com/svn/trunk/demos/images/textarea.png">

{{{
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Textarea Example</title>
  <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.0/themes/redmond/jquery-ui.css">
  <link rel="stylesheet" href="css/jquery-ui-plugins.min.css" type="text/css"/>
  <script src="http://code.jquery.com/jquery-1.8.2.js"></script>
  <script src="http://code.jquery.com/ui/1.9.0/jquery-ui.js"></script>
  <script type="text/javascript" src="js/jquery-ui-plugins.min.js"></script>	
</head>
<body>		
  <textarea id="myTextarea" rows="10" cols="30"></textarea>
	
  <script type="text/javascript">		
		
    $(function() {				
      $('#myTextarea').textarea({
        'maxChars': 100, 
	'charLimitMessage': '{ENTERED} of {MAX} characters, {REMAINING} left'					
      });		
    });
  </script>													
</body>
</html>
}}}

=Textarea API=

<table cellspacing="10px">
	<tr>
		<td><h3>[#Options Options]</h3></td>
		<td><h3>[#Methods Methods]</h3></td>
		<td><h3>[#Events Events]</h3></td>
	</tr>
	<tr>
		<td>[#charLimitMessage charLimitMessage]</td>
		<td>[#afterCursor() afterCursor]</td>
		<td>[#afterChange(event,_data) afterChange]</td>
	</tr>
	<tr>
		<td>[#limitMessageClass limitMessageClass]</td>
		<td>[#beforeCursor() beforeCursor]</td>
		<td>[#beforeChange(event,_data) beforeChange]</td>
	</tr>
	<tr>
		<td>[#limitMessageStyle limitMessageStyle]</td>
		<td>[#destroy() destroy]</td>
		<td></td>
	</tr>
	<tr>
		<td>[#maxChars maxChars]</td>
		<td>[#refresh() refresh]</td>
		<td></td>
	</tr>
	<tr>
		<td>[#pasteFlickerFix pasteFlickerFix]</td>
		<td>[#remaining() remaining]</td>
		<td></td>
	</tr>
	<tr>
		<td></td>
		<td>[#replaceSelection(replacement) replaceSelection]</td>
		<td></td>
	</tr>
	<tr>
		<td></td>
		<td>[#selectedText() selectedText]</td>
		<td></td>
	</tr>
	<tr>
		<td></td>
		<td>[#selectionEnd() selectionEnd]</td>
		<td></td>
	</tr>
	<tr>
		<td></td>
		<td>[#selectionStart() selectionStart]</td>
		<td></td>
	</tr>
</table>

---------------------------------------

==Options==
====charLimitMessage====
The message displayed to the user to communicate the character limit info. The place holders {MAX}, {ENTERED} and {REMAINING} can be use to substitute the current value for max characters, characters entered and characters remaining.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ""

*Example:*

Set during initialization:
{{{
$('#myTextarea').textarea({
  'maxChars': 100, 
  'charLimitMessage': '{ENTERED} of {MAX} characters, {REMAINING}
});
}}}

OR via option method after initialization:
{{{
$('#myTextarea').textarea('option', 'charLimitMessage', '{ENTERED} of {MAX}');
}}}
---------------------------------------
  
====limitMessageClass====
List of CSS classes to be applied to the limit message.

*Type:* [http://api.jquery.com/Types/#String String]

*Default:* ""

*Example:*

Set during initialization:
{{{
$('#myTextarea').textarea({
  'maxChars': 100, 
  'charLimitMessage': '{ENTERED} of {MAX} characters', 					
  'limitMessageClass': 'red'
});	
}}}

OR via option method after initialization:
{{{
$('#myTextarea').textarea('option', 'limitMessageClass', 'blue');
}}}
---------------------------------------

====limitMessageStyle====
CSS style applied to limit message.

*Type:*  [http://api.jquery.com/Types/#String String] or  [http://api.jquery.com/Types/#Object Object]

*Default:* ""

*Example:*

Set during initialization:
{{{
$('#myTextarea').textarea({
  'maxChars': 100, 
  'charLimitMessage': '{ENTERED} of {MAX} characters',
  'limitMessageStyle': {'font-weight': 'bold'},
});
}}}

OR via option method after initialization:
{{{
$('#myTextarea').textarea('option', 'limitMessageStyle', {'font-weight': 'bold'});
}}}
---------------------------------------
 
====maxChars====
Number or function returning the number of chars allowed. Using a function is valuable for dynamic limits, for example, when the limit depends on the contents of another textarea.

*Type:* [http://api.jquery.com/Types/#Number Number] or  [http://api.jquery.com/Types/#Function Function]

*Default:* -1

*Example:*

Set during initialization:
{{{
$('#myTextarea').textarea({
  'maxChars': 100
});
}}}

OR via option method after initialization:
{{{
$('#myTextarea').textarea('option', 'maxChars', 50);
}}}
---------------------------------------
 
====pasteFlickerFix====
Turning this off will help performance but you'll see a flicker in some browsers when text that's too long is pasted into the textarea.

*Type:* [http://api.jquery.com/Types/#Boolean Boolean]

*Default:* true

*Example:*

Set during initialization:
{{{
$('#myTextarea').textarea({
  'maxChars': 100,
  'pasteFlickerFix': false
});
}}}

OR via option method after initialization:
{{{
$('#myTextarea').textarea('option', 'pasteFlickerFix', false);
}}}
---------------------------------------

==Methods==
====afterCursor()====
Get the text after the current cursor location.

*Returns:* [http://api.jquery.com/Types/#String String]

*Example:*
{{{
var textAfterCursor = $('#myTextarea').textarea('afterCursor');
}}}
---------------------------------------

====beforeCursor()====
Get the text before the current cursor location.

*Returns:* [http://api.jquery.com/Types/#String String]

*Example:*
{{{
var textBeforeCursor = $('#myTextarea').textarea('beforeCursor');
}}}
---------------------------------------

====destroy()====
Destroy the text area, removing all functionality added by the plugin.

*Example:*
{{{
$('#myTextarea').textarea('destroy');
}}}
---------------------------------------

====refresh()====
Refresh the text area. This is useful for updating the char limit message on a textarea with a dynamic character limit, e.g. when the limit is based on the content of multiple textareas

*Example:*
{{{
$('#myTextarea').textarea('refresh');
}}}
---------------------------------------
====remaining()====
Get the remaining number of characters that can be entered

*Returns:* [http://api.jquery.com/Types/#Number Number]

*Example:*
{{{
var charsRemaining = $('#myTextarea').textarea('remaining');
}}}
---------------------------------------
====replaceSelection(replacement)====
Replace the current selection with the text specified by the replacement parameter.

 * *replacement*
 Type: [http://api.jquery.com/Types/#String String]

 The text that will replace the current selection.
 
*Example:*
{{{
$textarea.textarea('replaceSelection', 'My new text');
}}}
---------------------------------------
====selectedText()====
Get the current text selection.

*Returns:* [http://api.jquery.com/Types/#String String]
 
*Example:*
{{{
var selectedText = $('#myTextarea').textarea('selectedText');
}}}
---------------------------------------
====selectedText(start, end)==== 
Set the current text selection using the provided start and end values.

 * *start*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 A zero based index indicating where to start the selection. The character at this index will be included in the selection.

 * *end*
 Type: [http://api.jquery.com/Types/#Integer Integer]

 A zero based index indicating where to stop the selection. the character at this index will not be included in the selection.
 	
*Example:*
{{{
// if the textarea contains the text "Hamburger", the follwoing call to selectedText will set the selection to "urge".
$('#myTextarea').textarea('selectedText', 4, 8);
}}}
---------------------------------------
====selectionEnd()====
Get the zero-based index of the character at the end of the current selection. This is the first character that is NOT part of the current selection.

*Returns:* [http://api.jquery.com/Types/#Number Number]

*Example:*
{{{
var end = $('#myTextarea').textarea('selectionEnd');
}}}
---------------------------------------
====selectionStart()====
Get the zero-based index of the character at the start of the current selection.

*Returns:* [http://api.jquery.com/Types/#Number Number]

*Example:*
{{{
var start = $('#myTextarea').textarea('selectionStart');
}}}
---------------------------------------

==Events==
====afterChange(event, data)====
Triggered when the text is changed after the limit message has been updated.

 * *event*
 Type: [http://api.jquery.com/Types/#Event Event]

 * *data*
 Type: [http://api.jquery.com/Types/#Object Object]
 
*Example:*
{{{
$('#myTextarea').textarea({
  'maxChars': 100,
  'afterChange': function(event, data) {
    // code to execute when afterChange is triggered
  }
});
}}}
---------------------------------------
====beforeChange(event, data)====
Triggered when a key is pressed or when content is pasted into the textarea. If a limit message exists, this event is fired before the limit message is updated.

 * *event*
 Type: [http://api.jquery.com/Types/#Event Event]

 * *data*
 Type: [http://api.jquery.com/Types/#Object Object]

*Example:*
{{{
$('#myTextarea').textarea({
  'maxChars': 100,
  'beforeChange': function(event, data) {
    // code to execute when beforeChange is triggered
  }
});
}}}